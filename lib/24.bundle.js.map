{"version":3,"sources":["webpack:///./node_modules/@theia/core/src/common/severity.ts","webpack:///./node_modules/@theia/task/src/browser/provided-task-configurations.ts","webpack:///./node_modules/@theia/task/src/browser/quick-open-task.ts","webpack:///./node_modules/@theia/task/src/browser/task-configuration-manager.ts","webpack:///./node_modules/@theia/task/src/browser/task-configuration-model.ts","webpack:///./node_modules/@theia/task/src/browser/task-configurations.ts","webpack:///./node_modules/@theia/task/src/browser/task-contribution.ts","webpack:///./node_modules/@theia/task/src/browser/task-definition-registry.ts","webpack:///./node_modules/@theia/task/src/browser/task-name-resolver.ts","webpack:///./node_modules/@theia/task/src/browser/task-node.ts","webpack:///./node_modules/@theia/task/src/browser/task-problem-matcher-registry.ts","webpack:///./node_modules/@theia/task/src/browser/task-problem-pattern-registry.ts","webpack:///./node_modules/@theia/task/src/browser/task-schema-updater.ts","webpack:///./node_modules/@theia/task/src/browser/task-service.ts","webpack:///./node_modules/@theia/task/src/browser/task-source-resolver.ts","webpack:///./node_modules/@theia/task/src/browser/task-templates.ts","webpack:///./node_modules/@theia/task/src/common/index.ts","webpack:///./node_modules/@theia/task/src/common/problem-matcher-protocol.ts","webpack:///./node_modules/@theia/task/src/common/task-protocol.ts","webpack:///./node_modules/@theia/task/src/common/task-watcher.ts","webpack:///./node_modules/@theia/variable-resolver/src/browser/variable-input-schema.ts"],"names":[],"mappings":"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","file":"24.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DiagnosticSeverity } from 'vscode-languageserver-types';\n\nexport enum Severity {\n    Ignore = 0,\n    Error = 1,\n    Warning = 2,\n    Info = 3,\n    Log = 4\n}\n\nexport namespace Severity {\n    const error = 'Errors';\n    const warning = 'Warnings';\n    const info = 'Info';\n    const log = 'Log';\n    const ignore = 'All';\n\n    export function fromValue(value: string | undefined): Severity {\n        value = value && value.toLowerCase();\n\n        if (!value) {\n            return Severity.Ignore;\n        }\n        if (['error', 'errors'].indexOf(value) !== -1) {\n            return Severity.Error;\n        }\n        if (['warn', 'warning', 'warnings'].indexOf(value) !== -1) {\n            return Severity.Warning;\n        }\n        if (value === 'info') {\n            return Severity.Info;\n        }\n        if (value === 'log') {\n            return Severity.Log;\n        }\n\n        return Severity.Ignore;\n    }\n\n    export function toDiagnosticSeverity(value: Severity): DiagnosticSeverity {\n        switch (value) {\n            case Severity.Ignore:\n                return DiagnosticSeverity.Hint;\n            case Severity.Info:\n                return DiagnosticSeverity.Information;\n            case Severity.Log:\n                return DiagnosticSeverity.Information;\n            case Severity.Warning:\n                return DiagnosticSeverity.Warning;\n            case Severity.Error:\n                return DiagnosticSeverity.Error;\n            default:\n                return DiagnosticSeverity.Error;\n        }\n    }\n\n    export function toString(severity: Severity | undefined): string {\n        switch (severity) {\n            case Severity.Error:\n                return error;\n            case Severity.Warning:\n                return warning;\n            case Severity.Info:\n                return info;\n            case Severity.Log:\n                return log;\n            default:\n                return ignore;\n        }\n    }\n\n    export function toArray(): string[] {\n        return [ignore, error, warning, info, log];\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { TaskProviderRegistry } from './task-contribution';\nimport { TaskDefinitionRegistry } from './task-definition-registry';\nimport { TaskConfiguration, TaskCustomization } from '../common';\nimport URI from '@theia/core/lib/common/uri';\n\n@injectable()\nexport class ProvidedTaskConfigurations {\n\n    /**\n     * Map of source (name of extension, or path of root folder that the task config comes from) and `task config map`.\n     * For the second level of inner map, the key is task label.\n     * For the third level of inner map, the key is the task scope and value TaskConfiguration.\n     */\n    protected tasksMap = new Map<string, Map<string, Map<string | undefined, TaskConfiguration>>>();\n\n    @inject(TaskProviderRegistry)\n    protected readonly taskProviderRegistry: TaskProviderRegistry;\n\n    @inject(TaskDefinitionRegistry)\n    protected readonly taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    /** returns a list of provided tasks */\n    async getTasks(): Promise<TaskConfiguration[]> {\n        const providers = await this.taskProviderRegistry.getProviders();\n        const providedTasks: TaskConfiguration[] = (await Promise.all(providers.map(p => p.provideTasks())))\n            .reduce((acc, taskArray) => acc.concat(taskArray), []);\n        this.cacheTasks(providedTasks);\n        return providedTasks;\n    }\n\n    /** returns the task configuration for a given source and label or undefined if none */\n    async getTask(source: string, taskLabel: string, scope?: string): Promise<TaskConfiguration | undefined> {\n        const task = this.getCachedTask(source, taskLabel, scope);\n        if (task) {\n            return task;\n        } else {\n            await this.getTasks();\n            return this.getCachedTask(source, taskLabel, scope);\n        }\n    }\n\n    /**\n     * Finds the detected task for the given task customization.\n     * The detected task is considered as a \"match\" to the task customization if it has all the `required` properties.\n     * In case that more than one customization is found, return the one that has the biggest number of matched properties.\n     *\n     * @param customization the task customization\n     * @return the detected task for the given task customization. If the task customization is not found, `undefined` is returned.\n     */\n    async getTaskToCustomize(customization: TaskCustomization, rootFolderPath: string): Promise<TaskConfiguration | undefined> {\n        const definition = this.taskDefinitionRegistry.getDefinition(customization);\n        if (!definition) {\n            return undefined;\n        }\n\n        const matchedTasks: TaskConfiguration[] = [];\n        let highest = -1;\n        const tasks = await this.getTasks();\n        for (const task of tasks) { // find detected tasks that match the `definition`\n            let score = 0;\n            if (!definition.properties.required.every(requiredProp => customization[requiredProp] !== undefined)) {\n                continue;\n            }\n            score += definition.properties.required.length; // number of required properties\n            const requiredProps = new Set(definition.properties.required);\n            // number of optional properties\n            score += definition.properties.all.filter(p => !requiredProps.has(p) && customization[p] !== undefined).length;\n            if (score >= highest) {\n                if (score > highest) {\n                    highest = score;\n                    matchedTasks.length = 0;\n                }\n                matchedTasks.push(task);\n            }\n        }\n\n        // find the task that matches the `customization`.\n        // The scenario where more than one match is found should not happen unless users manually enter multiple customizations for one type of task\n        // If this does happen, return the first match\n        const rootFolderUri = new URI(rootFolderPath).toString();\n        const matchedTask = matchedTasks.filter(t =>\n            rootFolderUri === t._scope && definition.properties.all.every(p => t[p] === customization[p])\n        )[0];\n        return matchedTask;\n    }\n\n    protected getCachedTask(source: string, taskLabel: string, scope?: string): TaskConfiguration | undefined {\n        const labelConfigMap = this.tasksMap.get(source);\n        if (labelConfigMap) {\n            const scopeConfigMap = labelConfigMap.get(taskLabel);\n            if (scopeConfigMap) {\n                return scopeConfigMap.get(scope);\n            }\n        }\n    }\n\n    protected cacheTasks(tasks: TaskConfiguration[]): void {\n        for (const task of tasks) {\n            const label = task.label;\n            const source = task._source;\n            const scope = task._scope;\n            if (this.tasksMap.has(source)) {\n                const labelConfigMap = this.tasksMap.get(source)!;\n                if (labelConfigMap.has(label)) {\n                    labelConfigMap.get(label)!.set(scope, task);\n                } else {\n                    const newScopeConfigMap = new Map<undefined | string, TaskConfiguration>();\n                    newScopeConfigMap.set(scope, task);\n                    labelConfigMap.set(label, newScopeConfigMap);\n                }\n            } else {\n                const newLabelConfigMap = new Map<string, Map<undefined | string, TaskConfiguration>>();\n                const newScopeConfigMap = new Map<undefined | string, TaskConfiguration>();\n                newScopeConfigMap.set(scope, task);\n                newLabelConfigMap.set(label, newScopeConfigMap);\n                this.tasksMap.set(source, newLabelConfigMap);\n            }\n        }\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { TaskService } from './task-service';\nimport { TaskInfo, TaskConfiguration, TaskCustomization } from '../common/task-protocol';\nimport { TaskDefinitionRegistry } from './task-definition-registry';\nimport URI from '@theia/core/lib/common/uri';\nimport { QuickOpenHandler, QuickOpenService, QuickOpenOptions, QuickOpenBaseAction, LabelProvider } from '@theia/core/lib/browser';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { TerminalService } from '@theia/terminal/lib/browser/base/terminal-service';\nimport { FileSystem } from '@theia/filesystem/lib/common';\nimport {\n    QuickOpenModel, QuickOpenItem, QuickOpenActionProvider, QuickOpenMode, QuickOpenGroupItem, QuickOpenGroupItemOptions, QuickOpenAction\n} from '@theia/core/lib/common/quick-open-model';\nimport { PreferenceService } from '@theia/core/lib/browser';\nimport { TaskNameResolver } from './task-name-resolver';\nimport { TaskSourceResolver } from './task-source-resolver';\nimport { TaskConfigurationManager } from './task-configuration-manager';\nimport { ThemeService } from '@theia/core/lib/browser/theming';\n\n@injectable()\nexport class ConfigureTaskAction extends QuickOpenBaseAction {\n\n    @inject(TaskService)\n    protected readonly taskService: TaskService;\n\n    constructor() {\n        super({ id: 'configure:task' });\n\n        this.updateTheme();\n\n        ThemeService.get().onThemeChange(() => this.updateTheme());\n    }\n\n    async run(item?: QuickOpenItem): Promise<void> {\n        if (item instanceof TaskRunQuickOpenItem) {\n            this.taskService.configure(item.getTask());\n        }\n    }\n\n    protected updateTheme(): void {\n        const theme = ThemeService.get().getCurrentTheme().id;\n        if (theme === 'dark') {\n            this.class = 'quick-open-task-configure-dark';\n        } else if (theme === 'light') {\n            this.class = 'quick-open-task-configure-bright';\n        }\n    }\n}\n\n@injectable()\nexport class TaskActionProvider implements QuickOpenActionProvider {\n\n    @inject(ConfigureTaskAction)\n    protected configureTaskAction: ConfigureTaskAction;\n\n    hasActions(): boolean {\n        return true;\n    }\n\n    getActions(): ReadonlyArray<QuickOpenAction> {\n        return [this.configureTaskAction];\n    }\n}\n\n@injectable()\nexport class QuickOpenTask implements QuickOpenModel, QuickOpenHandler {\n\n    protected items: QuickOpenItem[];\n    protected actionProvider: QuickOpenActionProvider | undefined;\n\n    readonly prefix: string = 'task ';\n\n    readonly description: string = 'Run Task';\n\n    @inject(TaskService)\n    protected readonly taskService: TaskService;\n\n    @inject(QuickOpenService)\n    protected readonly quickOpenService: QuickOpenService;\n\n    @inject(TaskActionProvider)\n    protected readonly taskActionProvider: TaskActionProvider;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(TaskDefinitionRegistry)\n    protected readonly taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    @inject(TaskNameResolver)\n    protected readonly taskNameResolver: TaskNameResolver;\n\n    @inject(TaskSourceResolver)\n    protected readonly taskSourceResolver: TaskSourceResolver;\n\n    @inject(FileSystem)\n    protected readonly fileSystem: FileSystem;\n\n    @inject(TaskConfigurationManager)\n    protected readonly taskConfigurationManager: TaskConfigurationManager;\n\n    @inject(PreferenceService)\n    protected readonly preferences: PreferenceService;\n\n    /** Initialize this quick open model with the tasks. */\n    async init(): Promise<void> {\n        const recentTasks = this.taskService.recentTasks;\n        const configuredTasks = await this.taskService.getConfiguredTasks();\n        const providedTasks = await this.taskService.getProvidedTasks();\n\n        const { filteredRecentTasks, filteredConfiguredTasks, filteredProvidedTasks } = this.getFilteredTasks(recentTasks, configuredTasks, providedTasks);\n        const isMulti: boolean = this.workspaceService.isMultiRootWorkspaceOpened;\n        this.items = [];\n        this.items.push(\n            ...filteredRecentTasks.map((task, index) => {\n                const item = new TaskRunQuickOpenItem(task, this.taskService, isMulti, {\n                    groupLabel: index === 0 ? 'recently used tasks' : undefined,\n                    showBorder: false\n                }, this.taskDefinitionRegistry, this.taskNameResolver, this.taskSourceResolver);\n                return item;\n            }),\n            ...filteredConfiguredTasks.map((task, index) => {\n                const item = new TaskRunQuickOpenItem(task, this.taskService, isMulti, {\n                    groupLabel: index === 0 ? 'configured tasks' : undefined,\n                    showBorder: (\n                        filteredRecentTasks.length <= 0\n                            ? false\n                            : index === 0 ? true : false\n                    )\n                }, this.taskDefinitionRegistry, this.taskNameResolver, this.taskSourceResolver);\n                return item;\n            }),\n            ...filteredProvidedTasks.map((task, index) => {\n                const item = new TaskRunQuickOpenItem(task, this.taskService, isMulti, {\n                    groupLabel: index === 0 ? 'detected tasks' : undefined,\n                    showBorder: (\n                        filteredRecentTasks.length <= 0 && filteredConfiguredTasks.length <= 0\n                            ? false\n                            : index === 0 ? true : false\n                    )\n                }, this.taskDefinitionRegistry, this.taskNameResolver, this.taskSourceResolver);\n                return item;\n            })\n        );\n\n        this.actionProvider = this.items.length ? this.taskActionProvider : undefined;\n    }\n\n    async open(): Promise<void> {\n        await this.init();\n        if (!this.items.length) {\n            this.items.push(new QuickOpenItem({\n                label: 'No task to run found. Configure Tasks...',\n                run: (mode: QuickOpenMode): boolean => {\n                    if (mode !== QuickOpenMode.OPEN) {\n                        return false;\n                    }\n                    this.configure();\n                    return true;\n                }\n            }));\n        }\n        this.quickOpenService.open(this, {\n            placeholder: 'Select the task to run',\n            fuzzyMatchLabel: true,\n            fuzzySort: false\n        });\n    }\n\n    getModel(): QuickOpenModel {\n        return this;\n    }\n\n    getOptions(): QuickOpenOptions {\n        return {\n            fuzzyMatchLabel: true,\n            fuzzySort: false\n        };\n    }\n\n    attach(): void {\n        this.items = [];\n        this.actionProvider = undefined;\n\n        this.taskService.getRunningTasks().then(tasks => {\n            if (!tasks.length) {\n                this.items.push(new QuickOpenItem({\n                    label: 'No tasks found',\n                    run: (_mode: QuickOpenMode): boolean => false\n                }));\n            }\n            for (const task of tasks) {\n                // can only attach to terminal processes, so only list those\n                if (task.terminalId) {\n                    this.items.push(\n                        new TaskAttachQuickOpenItem(\n                            task,\n                            this.getRunningTaskLabel(task),\n                            this.taskService\n                        )\n                    );\n                }\n            }\n            this.quickOpenService.open(this, {\n                placeholder: 'Choose task to open',\n                fuzzyMatchLabel: true,\n                fuzzySort: true\n            });\n        });\n    }\n\n    async configure(): Promise<void> {\n        this.items = [];\n        this.actionProvider = undefined;\n        const isMulti: boolean = this.workspaceService.isMultiRootWorkspaceOpened;\n\n        const configuredTasks = await this.taskService.getConfiguredTasks();\n        const providedTasks = await this.taskService.getProvidedTasks();\n\n        // check if tasks.json exists. If not, display \"Create tasks.json file from template\"\n        // If tasks.json exists and empty, display 'Open tasks.json file'\n        let isFirstGroup = true;\n        const { filteredConfiguredTasks, filteredProvidedTasks } = this.getFilteredTasks([], configuredTasks, providedTasks);\n        const groupedTasks = this.getGroupedTasksByWorkspaceFolder([...filteredConfiguredTasks, ...filteredProvidedTasks]);\n        if (groupedTasks.has(undefined)) {\n            const configs = groupedTasks.get(undefined)!;\n            this.items.push(\n                ...configs.map(taskConfig => {\n                    const item = new TaskConfigureQuickOpenItem(\n                        taskConfig,\n                        this.taskService,\n                        this.taskNameResolver,\n                        this.workspaceService,\n                        isMulti,\n                        { showBorder: false }\n                    );\n                    item['taskDefinitionRegistry'] = this.taskDefinitionRegistry;\n                    return item;\n                })\n            );\n            isFirstGroup = false;\n        }\n\n        const rootUris = (await this.workspaceService.roots).map(rootStat => rootStat.uri);\n        for (const rootFolder of rootUris) {\n            const uri = new URI(rootFolder).withScheme('file');\n            const folderName = uri.displayName;\n            if (groupedTasks.has(uri.toString())) {\n                const configs = groupedTasks.get(uri.toString())!;\n                this.items.push(\n                    ...configs.map((taskConfig, index) => {\n                        const item = new TaskConfigureQuickOpenItem(\n                            taskConfig,\n                            this.taskService,\n                            this.taskNameResolver,\n                            this.workspaceService,\n                            isMulti,\n                            {\n                                groupLabel: index === 0 && isMulti ? folderName : '',\n                                showBorder: !isFirstGroup && index === 0\n                            }\n                        );\n                        item['taskDefinitionRegistry'] = this.taskDefinitionRegistry;\n                        return item;\n                    })\n                );\n            } else {\n                const { configUri } = this.preferences.resolve('tasks', [], uri.toString());\n                const existTaskConfigFile = !!configUri;\n                this.items.push(new QuickOpenGroupItem({\n                    label: existTaskConfigFile ? 'Open tasks.json file' : 'Create tasks.json file from template',\n                    run: (mode: QuickOpenMode): boolean => {\n                        if (mode !== QuickOpenMode.OPEN) {\n                            return false;\n                        }\n                        setTimeout(() => this.taskConfigurationManager.openConfiguration(uri.toString()));\n                        return true;\n                    },\n                    showBorder: !isFirstGroup,\n                    groupLabel: isMulti ? folderName : ''\n                }));\n            }\n            isFirstGroup = false;\n        }\n\n        if (this.items.length === 0) {\n            this.items.push(new QuickOpenItem({\n                label: 'No tasks found',\n                run: (_mode: QuickOpenMode): boolean => false\n            }));\n        }\n\n        this.quickOpenService.open(this, {\n            placeholder: 'Select a task to configure',\n            fuzzyMatchLabel: true,\n            fuzzySort: false\n        });\n    }\n\n    async runBuildOrTestTask(buildOrTestType: 'build' | 'test'): Promise<void> {\n        const shouldRunBuildTask = buildOrTestType === 'build';\n        await this.init();\n        if (this.items.length > 1 ||\n            this.items.length === 1 && (this.items[0] as TaskRunQuickOpenItem).getTask !== undefined) { // the item in `this.items` is not 'No tasks found'\n\n            const buildOrTestTasks = this.items.filter((t: TaskRunQuickOpenItem) =>\n                shouldRunBuildTask ? TaskCustomization.isBuildTask(t.getTask()) : TaskCustomization.isTestTask(t.getTask())\n            );\n            this.actionProvider = undefined;\n            if (buildOrTestTasks.length > 0) { // build / test tasks are defined in the workspace\n                const defaultBuildOrTestTasks = buildOrTestTasks.filter((t: TaskRunQuickOpenItem) =>\n                    shouldRunBuildTask ? TaskCustomization.isDefaultBuildTask(t.getTask()) : TaskCustomization.isDefaultTestTask(t.getTask())\n                );\n                if (defaultBuildOrTestTasks.length === 1) { // run the default build / test task\n                    const defaultBuildOrTestTask = defaultBuildOrTestTasks[0];\n                    const taskToRun = (defaultBuildOrTestTask as TaskRunQuickOpenItem).getTask();\n                    const scope = this.taskSourceResolver.resolve(taskToRun);\n\n                    if (this.taskDefinitionRegistry && !!this.taskDefinitionRegistry.getDefinition(taskToRun)) {\n                        this.taskService.run(taskToRun.source, taskToRun.label, scope);\n                    } else {\n                        this.taskService.run(taskToRun._source, taskToRun.label, scope);\n                    }\n                    return;\n                }\n\n                // if default build / test task is not found, or there are more than one default,\n                // display the list of build /test tasks to let the user decide which to run\n                this.items = buildOrTestTasks;\n\n            } else { // no build / test tasks, display an action item to configure the build / test task\n                this.items = [new QuickOpenItem({\n                    label: `No ${buildOrTestType} task to run found. Configure ${buildOrTestType.charAt(0).toUpperCase() + buildOrTestType.slice(1)} Task...`,\n                    run: (mode: QuickOpenMode): boolean => {\n                        if (mode !== QuickOpenMode.OPEN) {\n                            return false;\n                        }\n\n                        this.init().then(() => {\n                            // update the `tasks.json` file, instead of running the task itself\n                            this.items = this.items.map((item: TaskRunQuickOpenItem) => {\n                                const newItem = new ConfigureBuildOrTestTaskQuickOpenItem(\n                                    item.getTask(),\n                                    this.taskService,\n                                    this.workspaceService.isMultiRootWorkspaceOpened,\n                                    item.options,\n                                    this.taskNameResolver,\n                                    shouldRunBuildTask,\n                                    this.taskConfigurationManager,\n                                    this.taskDefinitionRegistry,\n                                    this.taskSourceResolver\n                                );\n                                return newItem;\n                            });\n                            this.quickOpenService.open(this, {\n                                placeholder: `Select the task to be used as the default ${buildOrTestType} task`,\n                                fuzzyMatchLabel: true,\n                                fuzzySort: false\n                            });\n                        });\n\n                        return true;\n                    }\n                })];\n            }\n        } else { // no tasks are currently present, prompt users if they'd like to configure a task.\n            this.items = [\n                new QuickOpenItem({\n                    label: `No ${buildOrTestType} task to run found. Configure ${buildOrTestType.charAt(0).toUpperCase() + buildOrTestType.slice(1)} Task...`,\n                    run: (mode: QuickOpenMode): boolean => {\n                        if (mode !== QuickOpenMode.OPEN) {\n                            return false;\n                        }\n                        this.configure();\n                        return true;\n                    }\n                })\n            ];\n        }\n\n        this.quickOpenService.open(this, {\n            placeholder: `Select the ${buildOrTestType} task to run`,\n            fuzzyMatchLabel: true,\n            fuzzySort: false\n        });\n    }\n\n    onType(lookFor: string, acceptor: (items: QuickOpenItem[], actionProvider?: QuickOpenActionProvider) => void): void {\n        acceptor(this.items, this.actionProvider);\n    }\n\n    protected getRunningTaskLabel(task: TaskInfo): string {\n        return `Task id: ${task.taskId}, label: ${task.config.label}`;\n    }\n\n    private getFilteredTasks(recentTasks: TaskConfiguration[], configuredTasks: TaskConfiguration[], providedTasks: TaskConfiguration[]): {\n        filteredRecentTasks: TaskConfiguration[], filteredConfiguredTasks: TaskConfiguration[], filteredProvidedTasks: TaskConfiguration[]\n    } {\n\n        const filteredRecentTasks: TaskConfiguration[] = [];\n        recentTasks.forEach(recent => {\n            const originalTaskConfig = [...configuredTasks, ...providedTasks].find(t => this.taskDefinitionRegistry.compareTasks(recent, t));\n            if (originalTaskConfig) {\n                filteredRecentTasks.push(originalTaskConfig);\n            }\n        });\n\n        const filteredProvidedTasks: TaskConfiguration[] = [];\n        providedTasks.forEach(provided => {\n            const exist = [...filteredRecentTasks, ...configuredTasks].some(t => this.taskDefinitionRegistry.compareTasks(provided, t));\n            if (!exist) {\n                filteredProvidedTasks.push(provided);\n            }\n        });\n\n        const filteredConfiguredTasks: TaskConfiguration[] = [];\n        configuredTasks.forEach(configured => {\n            const exist = filteredRecentTasks.some(t => this.taskDefinitionRegistry.compareTasks(configured, t));\n            if (!exist) {\n                filteredConfiguredTasks.push(configured);\n            }\n        });\n\n        return {\n            filteredRecentTasks, filteredConfiguredTasks, filteredProvidedTasks\n        };\n    }\n\n    private getGroupedTasksByWorkspaceFolder(tasks: TaskConfiguration[]): Map<string | undefined, TaskConfiguration[]> {\n        const grouped = new Map<string | undefined, TaskConfiguration[]>();\n        for (const task of tasks) {\n            const folder = task._scope;\n            if (grouped.has(folder)) {\n                grouped.get(folder)!.push(task);\n            } else {\n                grouped.set(folder, [task]);\n            }\n        }\n        for (const taskConfigs of grouped.values()) {\n            taskConfigs.sort((t1, t2) => t1.label.localeCompare(t2.label));\n        }\n        return grouped;\n    }\n}\n\nexport class TaskRunQuickOpenItem extends QuickOpenGroupItem {\n\n    constructor(\n        protected readonly task: TaskConfiguration,\n        protected taskService: TaskService,\n        protected isMulti: boolean,\n        public readonly options: QuickOpenGroupItemOptions,\n        protected readonly taskDefinitionRegistry: TaskDefinitionRegistry,\n        protected readonly taskNameResolver: TaskNameResolver,\n        protected readonly taskSourceResolver: TaskSourceResolver\n    ) {\n        super(options);\n    }\n\n    getTask(): TaskConfiguration {\n        return this.task;\n    }\n\n    getLabel(): string {\n        return this.taskNameResolver.resolve(this.task);\n    }\n\n    getGroupLabel(): string {\n        return this.options.groupLabel || '';\n    }\n\n    getDescription(): string {\n        if (!this.isMulti) {\n            return '';\n        }\n        if (this.taskDefinitionRegistry && !!this.taskDefinitionRegistry.getDefinition(this.task)) {\n            if (this.task._scope) {\n                return new URI(this.task._scope).displayName;\n            }\n            return this.task._source;\n        } else {\n            return new URI(this.task._source).displayName;\n        }\n\n    }\n\n    run(mode: QuickOpenMode): boolean {\n        if (mode !== QuickOpenMode.OPEN) {\n            return false;\n        }\n\n        const scope = this.taskSourceResolver.resolve(this.task);\n        if (this.taskDefinitionRegistry && !!this.taskDefinitionRegistry.getDefinition(this.task)) {\n            this.taskService.run(this.task.source || this.task._source, this.task.label, scope);\n        } else {\n            this.taskService.run(this.task._source, this.task.label, scope);\n        }\n        return true;\n    }\n}\n\nexport class ConfigureBuildOrTestTaskQuickOpenItem extends TaskRunQuickOpenItem {\n    constructor(\n        protected readonly task: TaskConfiguration,\n        protected taskService: TaskService,\n        protected isMulti: boolean,\n        public readonly options: QuickOpenGroupItemOptions,\n        protected readonly taskNameResolver: TaskNameResolver,\n        protected readonly isBuildTask: boolean,\n        protected taskConfigurationManager: TaskConfigurationManager,\n        protected readonly taskDefinitionRegistry: TaskDefinitionRegistry,\n        protected readonly taskSourceResolver: TaskSourceResolver\n    ) {\n        super(task, taskService, isMulti, options, taskDefinitionRegistry, taskNameResolver, taskSourceResolver);\n    }\n\n    run(mode: QuickOpenMode): boolean {\n        if (mode !== QuickOpenMode.OPEN) {\n            return false;\n        }\n        this.taskService.updateTaskConfiguration(this.task, { group: { kind: this.isBuildTask ? 'build' : 'test', isDefault: true } })\n            .then(() => {\n                if (this.task._scope) {\n                    this.taskConfigurationManager.openConfiguration(this.task._scope);\n                }\n            });\n        return true;\n    }\n}\n\nexport class TaskAttachQuickOpenItem extends QuickOpenItem {\n\n    constructor(\n        protected readonly task: TaskInfo,\n        protected readonly taskLabel: string,\n        protected taskService: TaskService\n    ) {\n        super();\n    }\n\n    getLabel(): string {\n        return this.taskLabel!;\n    }\n\n    run(mode: QuickOpenMode): boolean {\n        if (mode !== QuickOpenMode.OPEN) {\n            return false;\n        }\n        if (this.task.terminalId) {\n            this.taskService.attach(this.task.terminalId, this.task.taskId);\n        }\n        return true;\n    }\n}\nexport class TaskConfigureQuickOpenItem extends QuickOpenGroupItem {\n\n    protected taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    constructor(\n        protected readonly task: TaskConfiguration,\n        protected readonly taskService: TaskService,\n        protected readonly taskNameResolver: TaskNameResolver,\n        protected readonly workspaceService: WorkspaceService,\n        protected readonly isMulti: boolean,\n        protected readonly options: QuickOpenGroupItemOptions\n    ) {\n        super(options);\n        const stat = this.workspaceService.workspace;\n        this.isMulti = stat ? !stat.isDirectory : false;\n    }\n\n    getLabel(): string {\n        return this.taskNameResolver.resolve(this.task);\n    }\n\n    getGroupLabel(): string {\n        return this.options.groupLabel || '';\n    }\n\n    getDescription(): string {\n        if (!this.isMulti) {\n            return '';\n        }\n        if (this.taskDefinitionRegistry && !!this.taskDefinitionRegistry.getDefinition(this.task)) {\n            if (this.task._scope) {\n                return new URI(this.task._scope).displayName;\n            }\n            return this.task._source;\n        } else {\n            return new URI(this.task._source).displayName;\n        }\n    }\n\n    run(mode: QuickOpenMode): boolean {\n        if (mode !== QuickOpenMode.OPEN) {\n            return false;\n        }\n        this.taskService.configure(this.task);\n\n        return true;\n    }\n}\n\n@injectable()\nexport class TaskTerminateQuickOpen implements QuickOpenModel {\n\n    @inject(QuickOpenService)\n    protected readonly quickOpenService: QuickOpenService;\n\n    @inject(TaskService)\n    protected readonly taskService: TaskService;\n\n    async onType(_lookFor: string, acceptor: (items: QuickOpenItem[]) => void): Promise<void> {\n        const items: QuickOpenItem[] = [];\n        const runningTasks: TaskInfo[] = await this.taskService.getRunningTasks();\n        if (runningTasks.length <= 0) {\n            items.push(new QuickOpenItem({\n                label: 'No task is currently running',\n                run: (): boolean => false,\n            }));\n        } else {\n            runningTasks.forEach((task: TaskInfo) => {\n                items.push(new QuickOpenItem({\n                    label: task.config.label,\n                    run: (mode: QuickOpenMode): boolean => {\n                        if (mode !== QuickOpenMode.OPEN) {\n                            return false;\n                        }\n                        this.taskService.kill(task.taskId);\n                        return true;\n                    }\n                }));\n            });\n            if (runningTasks.length > 1) {\n                items.push(new QuickOpenItem({\n                    label: 'All running tasks',\n                    run: (mode: QuickOpenMode): boolean => {\n                        if (mode !== QuickOpenMode.OPEN) {\n                            return false;\n                        }\n                        runningTasks.forEach((t: TaskInfo) => {\n                            this.taskService.kill(t.taskId);\n                        });\n                        return true;\n                    }\n                }));\n            }\n        }\n        acceptor(items);\n    }\n\n    async open(): Promise<void> {\n        this.quickOpenService.open(this, {\n            placeholder: 'Select task to terminate',\n            fuzzyMatchLabel: true,\n            fuzzyMatchDescription: true,\n        });\n    }\n\n}\n\n@injectable()\nexport class TaskRunningQuickOpen implements QuickOpenModel {\n\n    @inject(QuickOpenService)\n    protected readonly quickOpenService: QuickOpenService;\n\n    @inject(TaskService)\n    protected readonly taskService: TaskService;\n\n    @inject(TerminalService)\n    protected readonly terminalService: TerminalService;\n\n    async onType(_lookFor: string, acceptor: (items: QuickOpenItem[]) => void): Promise<void> {\n        const items: QuickOpenItem[] = [];\n        const runningTasks: TaskInfo[] = await this.taskService.getRunningTasks();\n        if (runningTasks.length <= 0) {\n            items.push(new QuickOpenItem({\n                label: 'No task is currently running',\n                run: (): boolean => false,\n            }));\n        } else {\n            runningTasks.forEach((task: TaskInfo) => {\n                items.push(new QuickOpenItem({\n                    label: task.config.label,\n                    run: (mode: QuickOpenMode): boolean => {\n                        if (mode !== QuickOpenMode.OPEN) {\n                            return false;\n                        }\n                        if (task.terminalId) {\n                            const terminal = this.terminalService.getById('terminal-' + task.terminalId);\n                            if (terminal) {\n                                this.terminalService.open(terminal);\n                            }\n                        }\n                        return true;\n                    }\n                }));\n            });\n        }\n        acceptor(items);\n    }\n\n    async open(): Promise<void> {\n        this.quickOpenService.open(this, {\n            placeholder: 'Select the task to show its output',\n            fuzzyMatchLabel: true,\n            fuzzyMatchDescription: true,\n        });\n    }\n}\n\nexport class TaskRestartRunningQuickOpenItem extends QuickOpenItem {\n\n    constructor(\n        protected readonly taskInfo: TaskInfo,\n        protected readonly taskService: TaskService,\n        protected readonly taskNameResolver: TaskNameResolver,\n        protected readonly taskSourceResolver: TaskSourceResolver,\n        protected readonly taskDefinitionRegistry: TaskDefinitionRegistry,\n        protected readonly labelProvider: LabelProvider,\n        protected readonly isMulti: boolean,\n        public readonly options: QuickOpenGroupItemOptions,\n    ) {\n        super(options);\n    }\n\n    getLabel(): string {\n        return this.taskNameResolver.resolve(this.taskInfo.config);\n    }\n\n    getDescription(): string {\n        if (!this.isMulti) {\n            return '';\n        }\n        const source = this.taskSourceResolver.resolve(this.taskInfo.config);\n        return source ? this.labelProvider.getName(new URI(source)) : '';\n    }\n\n    run(mode: QuickOpenMode): boolean {\n        if (mode !== QuickOpenMode.OPEN) {\n            return false;\n        }\n        this.taskService.restartTask(this.taskInfo);\n        return true;\n    }\n}\n\n@injectable()\nexport class TaskRestartRunningQuickOpen implements QuickOpenModel {\n\n    @inject(LabelProvider)\n    protected readonly labelProvider: LabelProvider;\n\n    @inject(QuickOpenService)\n    protected readonly quickOpenService: QuickOpenService;\n\n    @inject(TaskDefinitionRegistry)\n    protected readonly taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    @inject(TaskNameResolver)\n    protected readonly taskNameResolver: TaskNameResolver;\n\n    @inject(TaskSourceResolver)\n    protected readonly taskSourceResolver: TaskSourceResolver;\n\n    @inject(TaskService)\n    protected readonly taskService: TaskService;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    async onType(_lookFor: string, acceptor: (items: QuickOpenItem[]) => void): Promise<void> {\n        const items = [];\n        const runningTasks: TaskInfo[] = await this.taskService.getRunningTasks();\n        const isMulti: boolean = this.workspaceService.isMultiRootWorkspaceOpened;\n        if (runningTasks.length <= 0) {\n            items.push(new QuickOpenItem({\n                label: 'No task to restart',\n                run: (): boolean => false,\n            }));\n        } else {\n            runningTasks.forEach((task: TaskInfo) => {\n                items.push(new TaskRestartRunningQuickOpenItem(\n                    task,\n                    this.taskService,\n                    this.taskNameResolver,\n                    this.taskSourceResolver,\n                    this.taskDefinitionRegistry,\n                    this.labelProvider,\n                    isMulti,\n                    {},\n                ));\n            });\n        }\n        acceptor(items);\n    }\n\n    async open(): Promise<void> {\n        this.quickOpenService.open(this, {\n            placeholder: 'Select task to restart',\n            fuzzyMatchLabel: true,\n            fuzzyMatchDescription: true,\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport debounce = require('p-debounce');\nimport { inject, injectable, postConstruct } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { Emitter, Event } from '@theia/core/lib/common/event';\nimport { EditorManager, EditorWidget } from '@theia/editor/lib/browser';\nimport { PreferenceService, PreferenceScope } from '@theia/core/lib/browser';\nimport { QuickPickService } from '@theia/core/lib/common/quick-pick-service';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { TaskConfigurationModel } from './task-configuration-model';\nimport { TaskTemplateSelector } from './task-templates';\nimport { TaskCustomization, TaskConfiguration } from '../common/task-protocol';\nimport { WorkspaceVariableContribution } from '@theia/workspace/lib/browser/workspace-variable-contribution';\nimport { FileSystem, FileSystemError } from '@theia/filesystem/lib/common';\nimport { FileChange, FileChangeType } from '@theia/filesystem/lib/common/filesystem-watcher-protocol';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\n\n@injectable()\nexport class TaskConfigurationManager {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(EditorManager)\n    protected readonly editorManager: EditorManager;\n\n    @inject(QuickPickService)\n    protected readonly quickPick: QuickPickService;\n\n    @inject(FileSystem)\n    protected readonly filesystem: FileSystem;\n\n    @inject(PreferenceService)\n    protected readonly preferences: PreferenceService;\n\n    @inject(PreferenceConfigurations)\n    protected readonly preferenceConfigurations: PreferenceConfigurations;\n\n    @inject(WorkspaceVariableContribution)\n    protected readonly workspaceVariables: WorkspaceVariableContribution;\n\n    @inject(TaskTemplateSelector)\n    protected readonly taskTemplateSelector: TaskTemplateSelector;\n\n    protected readonly onDidChangeTaskConfigEmitter = new Emitter<FileChange>();\n    readonly onDidChangeTaskConfig: Event<FileChange> = this.onDidChangeTaskConfigEmitter.event;\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        this.updateModels();\n        this.preferences.onPreferenceChanged(e => {\n            if (e.preferenceName === 'tasks') {\n                this.updateModels();\n            }\n        });\n        this.workspaceService.onWorkspaceChanged(() => {\n            this.updateModels();\n        });\n    }\n\n    protected readonly models = new Map<string, TaskConfigurationModel>();\n    protected updateModels = debounce(async () => {\n        const roots = await this.workspaceService.roots;\n        const toDelete = new Set(this.models.keys());\n        for (const rootStat of roots) {\n            const key = rootStat.uri;\n            toDelete.delete(key);\n            if (!this.models.has(key)) {\n                const model = new TaskConfigurationModel(key, this.preferences);\n                model.onDidChange(() => this.onDidChangeTaskConfigEmitter.fire({ uri: key, type: FileChangeType.UPDATED }));\n                model.onDispose(() => this.models.delete(key));\n                this.models.set(key, model);\n                this.onDidChangeTaskConfigEmitter.fire({ uri: key, type: FileChangeType.UPDATED });\n            }\n        }\n        for (const uri of toDelete) {\n            const model = this.models.get(uri);\n            if (model) {\n                model.dispose();\n            }\n            this.onDidChangeTaskConfigEmitter.fire({ uri, type: FileChangeType.DELETED });\n        }\n    }, 500);\n\n    getTasks(sourceFolderUri: string): (TaskCustomization | TaskConfiguration)[] {\n        if (this.models.has(sourceFolderUri)) {\n            const taskPrefModel = this.models.get(sourceFolderUri)!;\n            return taskPrefModel.configurations;\n        }\n        return [];\n    }\n\n    getTask(name: string, sourceFolderUri: string | undefined): TaskCustomization | TaskConfiguration | undefined {\n        const taskPrefModel = this.getModel(sourceFolderUri);\n        if (taskPrefModel) {\n            for (const configuration of taskPrefModel.configurations) {\n                if (configuration.name === name) {\n                    return configuration;\n                }\n            }\n        }\n    }\n\n    async openConfiguration(sourceFolderUri: string): Promise<void> {\n        const taskPrefModel = this.getModel(sourceFolderUri);\n        if (taskPrefModel) {\n            await this.doOpen(taskPrefModel);\n        }\n    }\n\n    async addTaskConfiguration(sourceFolderUri: string, taskConfig: TaskCustomization): Promise<void> {\n        const taskPrefModel = this.getModel(sourceFolderUri);\n        if (taskPrefModel) {\n            const configurations = taskPrefModel.configurations;\n            return this.setTaskConfigurations(sourceFolderUri, [...configurations, taskConfig]);\n        }\n    }\n\n    async setTaskConfigurations(sourceFolderUri: string, taskConfigs: (TaskCustomization | TaskConfiguration)[]): Promise<void> {\n        const taskPrefModel = this.getModel(sourceFolderUri);\n        if (taskPrefModel) {\n            return taskPrefModel.setConfigurations(taskConfigs);\n        }\n    }\n\n    private getModel(sourceFolderUri: string | undefined): TaskConfigurationModel | undefined {\n        if (!sourceFolderUri) {\n            return undefined;\n        }\n        for (const model of this.models.values()) {\n            if (model.workspaceFolderUri === sourceFolderUri) {\n                return model;\n            }\n        }\n    }\n\n    protected async doOpen(model: TaskConfigurationModel): Promise<EditorWidget | undefined> {\n        let uri = model.uri;\n        if (!uri) {\n            uri = await this.doCreate(model);\n        }\n        if (uri) {\n            return this.editorManager.open(uri, {\n                mode: 'activate'\n            });\n        }\n    }\n\n    protected async doCreate(model: TaskConfigurationModel): Promise<URI | undefined> {\n        const content = await this.getInitialConfigurationContent();\n        if (content) {\n            await this.preferences.set('tasks', {}, PreferenceScope.Folder, model.workspaceFolderUri); // create dummy tasks.json in the correct place\n            const { configUri } = this.preferences.resolve('tasks', [], model.workspaceFolderUri); // get uri to write content to it\n\n            let uri: URI;\n            if (configUri && configUri.path.base === 'tasks.json') {\n                uri = configUri;\n            } else { // fallback\n                uri = new URI(model.workspaceFolderUri).resolve(`${this.preferenceConfigurations.getPaths()[0]}/tasks.json`);\n            }\n\n            const fileStat = await this.filesystem.getFileStat(uri.toString());\n            if (!fileStat) {\n                throw new Error(`file not found: ${uri.toString()}`);\n            }\n            try {\n                this.filesystem.setContent(fileStat, content);\n            } catch (e) {\n                if (!FileSystemError.FileExists.is(e)) {\n                    throw e;\n                }\n            }\n            return uri;\n        }\n    }\n\n    protected async getInitialConfigurationContent(): Promise<string | undefined> {\n        const selected = await this.quickPick.show(this.taskTemplateSelector.selectTemplates(), {\n            placeholder: 'Select a Task Template'\n        });\n        if (selected) {\n            return selected.content;\n        }\n    }\n}\n\nexport namespace TaskConfigurationManager {\n    export interface Data {\n        current?: {\n            name: string\n            workspaceFolderUri?: string\n        }\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport URI from '@theia/core/lib/common/uri';\nimport { Emitter, Event } from '@theia/core/lib/common/event';\nimport { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';\nimport { TaskCustomization, TaskConfiguration } from '../common/task-protocol';\nimport { PreferenceService, PreferenceScope } from '@theia/core/lib/browser/preferences/preference-service';\n\nexport class TaskConfigurationModel implements Disposable {\n\n    protected json: TaskConfigurationModel.JsonContent;\n\n    protected readonly onDidChangeEmitter = new Emitter<void>();\n    readonly onDidChange: Event<void> = this.onDidChangeEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection(\n        this.onDidChangeEmitter\n    );\n\n    constructor(\n        public readonly workspaceFolderUri: string,\n        protected readonly preferences: PreferenceService\n    ) {\n        this.reconcile();\n        this.toDispose.push(this.preferences.onPreferenceChanged(e => {\n            if (e.preferenceName === 'tasks' && e.affects(workspaceFolderUri)) {\n                this.reconcile();\n            }\n        }));\n    }\n\n    get uri(): URI | undefined {\n        return this.json.uri;\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n    get onDispose(): Event<void> {\n        return this.toDispose.onDispose;\n    }\n\n    get configurations(): (TaskCustomization | TaskConfiguration)[] {\n        return this.json.configurations;\n    }\n\n    protected reconcile(): void {\n        this.json = this.parseConfigurations();\n        this.onDidChangeEmitter.fire(undefined);\n    }\n\n    setConfigurations(value: object): Promise<void> {\n        return this.preferences.set('tasks.tasks', value, PreferenceScope.Folder, this.workspaceFolderUri);\n    }\n\n    protected parseConfigurations(): TaskConfigurationModel.JsonContent {\n        const configurations: (TaskCustomization | TaskConfiguration)[] = [];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { configUri, value } = this.preferences.resolve<any>('tasks', undefined, this.workspaceFolderUri);\n        if (value && typeof value === 'object' && 'tasks' in value) {\n            if (Array.isArray(value.tasks)) {\n                for (const taskConfig of value.tasks) {\n                    configurations.push(taskConfig);\n                }\n            }\n        }\n        return {\n            uri: configUri,\n            configurations\n        };\n    }\n\n}\nexport namespace TaskConfigurationModel {\n    export interface JsonContent {\n        uri?: URI;\n        configurations: (TaskCustomization | TaskConfiguration)[];\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017-2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as Ajv from 'ajv';\nimport { inject, injectable, postConstruct } from 'inversify';\nimport {\n    ContributedTaskConfiguration,\n    TaskConfiguration,\n    TaskCustomization,\n    TaskDefinition,\n    TaskOutputPresentation\n} from '../common';\nimport { TaskDefinitionRegistry } from './task-definition-registry';\nimport { ProvidedTaskConfigurations } from './provided-task-configurations';\nimport { TaskConfigurationManager } from './task-configuration-manager';\nimport { TaskSchemaUpdater } from './task-schema-updater';\nimport { TaskSourceResolver } from './task-source-resolver';\nimport { Disposable, DisposableCollection, ResourceProvider } from '@theia/core/lib/common';\nimport URI from '@theia/core/lib/common/uri';\nimport { FileChange, FileChangeType } from '@theia/filesystem/lib/common/filesystem-watcher-protocol';\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\nimport { OpenerService } from '@theia/core/lib/browser';\n\nexport interface TaskConfigurationClient {\n    /**\n     * The task configuration file has changed, so a client might want to refresh its configurations\n     * @returns an array of strings, each one being a task label\n     */\n    taskConfigurationChanged: (event: string[]) => void;\n}\n\n/**\n * Watches a tasks.json configuration file and provides a parsed version of the contained task configurations\n */\n@injectable()\nexport class TaskConfigurations implements Disposable {\n\n    protected readonly toDispose = new DisposableCollection();\n    /**\n     * Map of source (path of root folder that the task configs come from) and task config map.\n     * For the inner map (i.e., task config map), the key is task label and value TaskConfiguration\n     */\n    protected tasksMap = new Map<string, Map<string, TaskConfiguration>>();\n    /**\n     * Map of source (path of root folder that the task configs come from) and task customizations map.\n     */\n    protected taskCustomizationMap = new Map<string, TaskCustomization[]>();\n\n    protected client: TaskConfigurationClient | undefined = undefined;\n\n    /**\n     * Map of source (path of root folder that the task configs come from) and raw task configurations / customizations.\n     * This map is used to store the data from `tasks.json` files in workspace.\n     */\n    private rawTaskConfigurations = new Map<string, TaskCustomization[]>();\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(ResourceProvider)\n    protected readonly resourceProvider: ResourceProvider;\n\n    @inject(OpenerService)\n    protected readonly openerService: OpenerService;\n\n    @inject(TaskDefinitionRegistry)\n    protected readonly taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    @inject(ProvidedTaskConfigurations)\n    protected readonly providedTaskConfigurations: ProvidedTaskConfigurations;\n\n    @inject(TaskConfigurationManager)\n    protected readonly taskConfigurationManager: TaskConfigurationManager;\n\n    @inject(TaskSchemaUpdater)\n    protected readonly taskSchemaUpdater: TaskSchemaUpdater;\n\n    @inject(TaskSourceResolver)\n    protected readonly taskSourceResolver: TaskSourceResolver;\n\n    constructor() {\n        this.toDispose.push(Disposable.create(() => {\n            this.tasksMap.clear();\n            this.taskCustomizationMap.clear();\n            this.rawTaskConfigurations.clear();\n            this.client = undefined;\n        }));\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this.toDispose.push(\n            this.taskConfigurationManager.onDidChangeTaskConfig(async change => {\n                try {\n                    await this.onDidTaskFileChange([change]);\n                    if (this.client) {\n                        this.client.taskConfigurationChanged(this.getTaskLabels());\n                    }\n                } catch (err) {\n                    console.error(err);\n                }\n            })\n        );\n        this.reorganizeTasks();\n        this.toDispose.push(this.taskSchemaUpdater.onDidChangeTaskSchema(() => this.reorganizeTasks()));\n    }\n\n    setClient(client: TaskConfigurationClient): void {\n        this.client = client;\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    /** returns the list of known task labels */\n    getTaskLabels(): string[] {\n        return Array.from(this.tasksMap.values()).reduce((acc, labelConfigMap) => acc.concat(Array.from(labelConfigMap.keys())), [] as string[]);\n    }\n\n    /**\n     * returns a collection of known tasks, which includes:\n     * - all the configured tasks in `tasks.json`, and\n     * - the customized detected tasks.\n     *\n     * The invalid task configs are not returned.\n     */\n    async getTasks(): Promise<TaskConfiguration[]> {\n        const configuredTasks = Array.from(this.tasksMap.values()).reduce((acc, labelConfigMap) => acc.concat(Array.from(labelConfigMap.values())), [] as TaskConfiguration[]);\n        const detectedTasksAsConfigured: TaskConfiguration[] = [];\n        for (const [rootFolder, customizations] of Array.from(this.taskCustomizationMap.entries())) {\n            for (const cus of customizations) {\n                const detected = await this.providedTaskConfigurations.getTaskToCustomize(cus, rootFolder);\n                if (detected) {\n                    detectedTasksAsConfigured.push({ ...detected, ...cus });\n                }\n            }\n        }\n        return [...configuredTasks, ...detectedTasksAsConfigured];\n    }\n\n    /**\n     * returns a collection of invalid task configs as per the task schema defined in Theia.\n     */\n    getInvalidTaskConfigurations(): (TaskCustomization | TaskConfiguration)[] {\n        const invalidTaskConfigs: (TaskCustomization | TaskConfiguration)[] = [];\n        for (const taskConfigs of this.rawTaskConfigurations.values()) {\n            for (const taskConfig of taskConfigs) {\n                const isValid = this.isTaskConfigValid(taskConfig);\n                if (!isValid) {\n                    invalidTaskConfigs.push(taskConfig);\n                }\n            }\n        }\n        return invalidTaskConfigs;\n    }\n\n    /** returns the task configuration for a given label or undefined if none */\n    getTask(rootFolderPath: string, taskLabel: string): TaskConfiguration | undefined {\n        const labelConfigMap = this.tasksMap.get(rootFolderPath);\n        if (labelConfigMap) {\n            return labelConfigMap.get(taskLabel);\n        }\n    }\n\n    /** removes tasks configured in the given task config file */\n    private removeTasks(configFileUri: string): void {\n        const source = this.getSourceFolderFromConfigUri(configFileUri);\n        this.tasksMap.delete(source);\n        this.taskCustomizationMap.delete(source);\n    }\n\n    /**\n     * Removes task customization objects found in the given task config file from the memory.\n     * Please note: this function does not modify the task config file.\n     */\n    private removeTaskCustomizations(configFileUri: string): void {\n        const source = this.getSourceFolderFromConfigUri(configFileUri);\n        this.taskCustomizationMap.delete(source);\n    }\n\n    /**\n     * Returns the task customizations by type from a given root folder in the workspace.\n     * @param type the type of task customizations\n     * @param rootFolder the root folder to find task customizations from. If `undefined`, this function returns an empty array.\n     */\n    getTaskCustomizations(type: string, rootFolder?: string): TaskCustomization[] {\n        if (!rootFolder) {\n            return [];\n        }\n\n        const customizationInRootFolder = this.taskCustomizationMap.get(new URI(rootFolder).toString());\n        if (customizationInRootFolder) {\n            return customizationInRootFolder.filter(c => c.type === type);\n        }\n        return [];\n    }\n\n    /**\n     * Returns the customization object in `tasks.json` for the given task. Please note, this function\n     * returns `undefined` if the given task is not a detected task, because configured tasks don't need\n     * customization objects - users can modify its config directly in `tasks.json`.\n     * @param taskConfig The task config, which could either be a configured task or a detected task.\n     */\n    getCustomizationForTask(taskConfig: TaskConfiguration): TaskCustomization | undefined {\n        if (!this.isDetectedTask(taskConfig)) {\n            return undefined;\n        }\n\n        const customizationByType = this.getTaskCustomizations(taskConfig.taskType || taskConfig.type, taskConfig._scope) || [];\n        const hasCustomization = customizationByType.length > 0;\n        if (hasCustomization) {\n            const taskDefinition = this.taskDefinitionRegistry.getDefinition(taskConfig);\n            if (taskDefinition) {\n                const cus = customizationByType.filter(customization =>\n                    taskDefinition.properties.required.every(rp => customization[rp] === taskConfig[rp])\n                )[0]; // Only support having one customization per task\n                return cus;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Called when a change, to a config file we watch, is detected.\n     */\n    protected async onDidTaskFileChange(fileChanges: FileChange[]): Promise<void> {\n        for (const change of fileChanges) {\n            if (change.type === FileChangeType.DELETED) {\n                this.removeTasks(change.uri);\n            } else {\n                // re-parse the config file\n                await this.refreshTasks(change.uri);\n            }\n        }\n    }\n\n    /**\n     * Read the task configs from the task configuration manager, and updates the list of available tasks.\n     */\n    protected async refreshTasks(rootFolderUri: string): Promise<void> {\n        await this.readTasks(rootFolderUri);\n\n        this.removeTasks(rootFolderUri);\n        this.removeTaskCustomizations(rootFolderUri);\n\n        this.reorganizeTasks();\n    }\n\n    /** parses a config file and extracts the tasks launch configurations */\n    protected async readTasks(rootFolderUri: string): Promise<(TaskCustomization | TaskConfiguration)[] | undefined> {\n        const rawConfigArray = this.taskConfigurationManager.getTasks(rootFolderUri);\n        if (this.rawTaskConfigurations.has(rootFolderUri)) {\n            this.rawTaskConfigurations.delete(rootFolderUri);\n        }\n        this.rawTaskConfigurations.set(rootFolderUri, rawConfigArray);\n        return rawConfigArray;\n    }\n\n    /** Adds given task to a config file and opens the file to provide ability to edit task configuration. */\n    async configure(task: TaskConfiguration): Promise<void> {\n        const workspace = this.workspaceService.workspace;\n        if (!workspace) {\n            return;\n        }\n\n        const sourceFolderUri: string | undefined = this.taskSourceResolver.resolve(task);\n        if (!sourceFolderUri) {\n            console.error('Global task cannot be customized');\n            return;\n        }\n\n        const configuredAndCustomizedTasks = await this.getTasks();\n        if (!configuredAndCustomizedTasks.some(t => this.taskDefinitionRegistry.compareTasks(t, task))) {\n            await this.saveTask(sourceFolderUri, { ...task, problemMatcher: [] });\n        }\n\n        try {\n            await this.taskConfigurationManager.openConfiguration(sourceFolderUri);\n        } catch (e) {\n            console.error(`Error occurred while opening 'tasks.json' in ${sourceFolderUri}.`, e);\n        }\n    }\n\n    private getTaskCustomizationTemplate(task: TaskConfiguration): TaskCustomization | undefined {\n        const definition = this.getTaskDefinition(task);\n        if (!definition) {\n            console.error('Detected / Contributed tasks should have a task definition.');\n            return;\n        }\n        const customization: TaskCustomization = { type: task.taskType || task.type };\n        definition.properties.all.forEach(p => {\n            if (task[p] !== undefined) {\n                customization[p] = task[p];\n            }\n        });\n        if ('problemMatcher' in task) {\n            const problemMatcher: string[] = [];\n            if (Array.isArray(task.problemMatcher)) {\n                problemMatcher.push(...task.problemMatcher.map(t => {\n                    if (typeof t === 'string') {\n                        return t;\n                    } else {\n                        return t.name!;\n                    }\n                }));\n            } else if (typeof task.problemMatcher === 'string') {\n                problemMatcher.push(task.problemMatcher);\n            } else if (task.problemMatcher) {\n                problemMatcher.push(task.problemMatcher.name!);\n            }\n            customization.problemMatcher = problemMatcher.map(name => name.startsWith('$') ? name : `$${name}`);\n        }\n        if (task.group) {\n            customization.group = task.group;\n        }\n        return { ...customization };\n    }\n\n    /** Writes the task to a config file. Creates a config file if this one does not exist */\n    saveTask(sourceFolderUri: string, task: TaskConfiguration): Promise<void> {\n        const { _source, $ident, ...preparedTask } = task;\n        const customizedTaskTemplate = this.getTaskCustomizationTemplate(task) || preparedTask;\n        return this.taskConfigurationManager.addTaskConfiguration(sourceFolderUri, customizedTaskTemplate);\n    }\n\n    /**\n     * This function is called after a change in TaskDefinitionRegistry happens.\n     * It checks all tasks that have been loaded, and re-organized them in `tasksMap` and `taskCustomizationMap`.\n     */\n    protected reorganizeTasks(): void {\n        const newTaskMap = new Map<string, Map<string, TaskConfiguration>>();\n        const newTaskCustomizationMap = new Map<string, TaskCustomization[]>();\n        const addCustomization = (rootFolder: string, customization: TaskCustomization) => {\n            if (newTaskCustomizationMap.has(rootFolder)) {\n                newTaskCustomizationMap.get(rootFolder)!.push(customization);\n            } else {\n                newTaskCustomizationMap.set(rootFolder, [customization]);\n            }\n        };\n        const addConfiguredTask = (rootFolder: string, label: string, configuredTask: TaskCustomization) => {\n            if (newTaskMap.has(rootFolder)) {\n                newTaskMap.get(rootFolder)!.set(label, configuredTask as TaskConfiguration);\n            } else {\n                const newConfigMap = new Map();\n                newConfigMap.set(label, configuredTask);\n                newTaskMap.set(rootFolder, newConfigMap);\n            }\n        };\n\n        for (const [rootFolder, taskConfigs] of this.rawTaskConfigurations.entries()) {\n            for (const taskConfig of taskConfigs) {\n                const isValid = this.isTaskConfigValid(taskConfig);\n                if (!isValid) {\n                    continue;\n                }\n                const transformedTask = this.getTransformedRawTask(taskConfig, rootFolder);\n                if (this.isDetectedTask(transformedTask)) {\n                    addCustomization(rootFolder, transformedTask);\n                } else {\n                    addConfiguredTask(rootFolder, transformedTask['label'] as string, transformedTask);\n                }\n            }\n        }\n\n        this.taskCustomizationMap = newTaskCustomizationMap;\n        this.tasksMap = newTaskMap;\n    }\n\n    private getTransformedRawTask(rawTask: TaskCustomization | TaskConfiguration, rootFolderUri: string): TaskCustomization | TaskConfiguration {\n        let taskConfig: TaskCustomization | TaskConfiguration;\n        if (this.isDetectedTask(rawTask)) {\n            const def = this.getTaskDefinition(rawTask);\n            taskConfig = {\n                ...rawTask,\n                _source: def!.source,\n                _scope: rootFolderUri\n            };\n        } else {\n            taskConfig = {\n                ...rawTask,\n                _source: rootFolderUri,\n                _scope: rootFolderUri\n            };\n        }\n        return {\n            ...taskConfig,\n            presentation: TaskOutputPresentation.fromJson(rawTask)\n        };\n    }\n\n    /**\n     * Returns `true` if the given task configuration is valid as per the task schema defined in Theia\n     * or contributed by Theia extensions and plugins, `false` otherwise.\n     */\n    private isTaskConfigValid(task: TaskCustomization): boolean {\n        const schema = this.taskSchemaUpdater.getTaskSchema();\n        const ajv = new Ajv();\n        const validateSchema = ajv.compile(schema);\n        return !!validateSchema({ tasks: [task] });\n    }\n\n    /**\n     * Updates the task config in the `tasks.json`.\n     * The task config, together with updates, will be written into the `tasks.json` if it is not found in the file.\n     *\n     * @param task task that the updates will be applied to\n     * @param update the updates to be applied\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async updateTaskConfig(task: TaskConfiguration, update: { [name: string]: any }): Promise<void> {\n        const sourceFolderUri: string | undefined = this.taskSourceResolver.resolve(task);\n        if (!sourceFolderUri) {\n            console.error('Global task cannot be customized');\n            return;\n        }\n        const configuredAndCustomizedTasks = await this.getTasks();\n        if (configuredAndCustomizedTasks.some(t => this.taskDefinitionRegistry.compareTasks(t, task))) { // task is already in `tasks.json`\n            const jsonTasks = this.taskConfigurationManager.getTasks(sourceFolderUri);\n            if (jsonTasks) {\n                const ind = jsonTasks.findIndex((t: TaskCustomization | TaskConfiguration) => {\n                    if (t.type !== (task.taskType || task.type)) {\n                        return false;\n                    }\n                    const def = this.taskDefinitionRegistry.getDefinition(t);\n                    if (def) {\n                        return def.properties.all.every(p => t[p] === task[p]);\n                    }\n                    return t.label === task.label;\n                });\n                jsonTasks[ind] = {\n                    ...jsonTasks[ind],\n                    ...update\n                };\n            }\n            this.taskConfigurationManager.setTaskConfigurations(sourceFolderUri, jsonTasks);\n        } else { // task is not in `tasks.json`\n            Object.keys(update).forEach(taskProperty => {\n                task[taskProperty] = update[taskProperty];\n            });\n            this.saveTask(sourceFolderUri, task);\n        }\n    }\n\n    private getSourceFolderFromConfigUri(configFileUri: string): string {\n        return new URI(configFileUri).parent.parent.path.toString();\n    }\n\n    /** checks if the config is a detected / contributed task */\n    private isDetectedTask(task: TaskConfiguration | TaskCustomization): task is ContributedTaskConfiguration {\n        const taskDefinition = this.getTaskDefinition(task);\n        // it is considered as a customization if the task definition registry finds a def for the task configuration\n        return !!taskDefinition;\n    }\n\n    private getTaskDefinition(task: TaskConfiguration | TaskCustomization): TaskDefinition | undefined {\n        return this.taskDefinitionRegistry.getDefinition({\n            ...task,\n            type: task.taskType || task.type\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, postConstruct } from 'inversify';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { TaskConfiguration } from '../common/task-protocol';\nimport { WaitUntilEvent, Emitter } from '@theia/core/lib/common/event';\n\nexport const TaskContribution = Symbol('TaskContribution');\n\n/** Allows to contribute custom Task Resolvers, Task Providers. */\nexport interface TaskContribution {\n    registerResolvers?(resolvers: TaskResolverRegistry): void;\n    registerProviders?(providers: TaskProviderRegistry): void;\n}\n\nexport interface TaskResolver {\n    /** Resolves a Task Configuration before sending it for execution to the Task Server. */\n    resolveTask(taskConfig: TaskConfiguration): Promise<TaskConfiguration>;\n}\n\nexport interface TaskProvider {\n    /** Returns the Task Configurations which are provides programmatically to the system. */\n    provideTasks(): Promise<TaskConfiguration[]>;\n}\n\n@injectable()\nexport class TaskResolverRegistry {\n\n    protected readonly onWillProvideTaskResolverEmitter = new Emitter<WaitUntilEvent>();\n    readonly onWillProvideTaskResolver = this.onWillProvideTaskResolverEmitter.event;\n\n    protected resolvers: Map<string, TaskResolver>;\n\n    @postConstruct()\n    protected init(): void {\n        this.resolvers = new Map();\n    }\n\n    /** Registers the given Task Resolver to resolve the Task Configurations of the specified type. */\n    register(type: string, resolver: TaskResolver): Disposable {\n        this.resolvers.set(type, resolver);\n        return {\n            dispose: () => this.resolvers.delete(type)\n        };\n    }\n\n    async getResolver(type: string): Promise<TaskResolver | undefined> {\n        await WaitUntilEvent.fire(this.onWillProvideTaskResolverEmitter, {});\n        return this.resolvers.get(type);\n    }\n}\n\n@injectable()\nexport class TaskProviderRegistry {\n\n    protected readonly onWillProvideTaskProviderEmitter = new Emitter<WaitUntilEvent>();\n    readonly onWillProvideTaskProvider = this.onWillProvideTaskProviderEmitter.event;\n\n    protected providers: Map<string, TaskProvider>;\n\n    @postConstruct()\n    protected init(): void {\n        this.providers = new Map();\n    }\n\n    /** Registers the given Task Provider to return Task Configurations of the specified type. */\n    register(type: string, provider: TaskProvider, handle?: number): Disposable {\n        const key = handle === undefined ? type : `${type}::${handle}`;\n        this.providers.set(key, provider);\n        return {\n            dispose: () => this.providers.delete(key)\n        };\n    }\n\n    async getProvider(type: string): Promise<TaskProvider | undefined> {\n        await WaitUntilEvent.fire(this.onWillProvideTaskProviderEmitter, {});\n        return this.providers.get(type);\n    }\n\n    /** Returns all registered Task Providers. */\n    async getProviders(): Promise<TaskProvider[]> {\n        await WaitUntilEvent.fire(this.onWillProvideTaskProviderEmitter, {});\n        return [...this.providers.values()];\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport { Event, Emitter } from '@theia/core/lib/common';\nimport { TaskConfiguration, TaskCustomization, TaskDefinition } from '../common';\nimport URI from '@theia/core/lib/common/uri';\nimport { Disposable } from '@theia/core/lib/common/disposable';\n\n@injectable()\nexport class TaskDefinitionRegistry {\n\n    // task type - array of task definitions\n    private definitions: Map<string, TaskDefinition[]> = new Map();\n\n    protected readonly onDidRegisterTaskDefinitionEmitter = new Emitter<void>();\n    get onDidRegisterTaskDefinition(): Event<void> {\n        return this.onDidRegisterTaskDefinitionEmitter.event;\n    }\n\n    protected readonly onDidUnregisterTaskDefinitionEmitter = new Emitter<void>();\n    get onDidUnregisterTaskDefinition(): Event<void> {\n        return this.onDidUnregisterTaskDefinitionEmitter.event;\n    }\n\n    /**\n     * Returns all task definitions that are registered\n     * @return the task definitions that are registered\n     */\n    getAll(): TaskDefinition[] {\n        const all: TaskDefinition[] = [];\n        for (const definitions of this.definitions.values()) {\n            all.push(...definitions);\n        }\n        return all;\n    }\n\n    /**\n     * Finds the task definition(s) from the registry with the given `taskType`.\n     *\n     * @param taskType the type of the task\n     * @return an array of the task definitions. If no task definitions are found, an empty array is returned.\n     */\n    getDefinitions(taskType: string): TaskDefinition[] {\n        return this.definitions.get(taskType) || [];\n    }\n\n    /**\n     * Finds the task definition from the registry for the task configuration.\n     * The task configuration is considered as a \"match\" to the task definition if it has all the `required` properties.\n     * In case that more than one task definition is found, return the one that has the biggest number of matched properties.\n     *\n     * @param taskConfiguration the task configuration\n     * @return the task definition for the task configuration. If the task definition is not found, `undefined` is returned.\n     */\n    getDefinition(taskConfiguration: TaskConfiguration | TaskCustomization): TaskDefinition | undefined {\n        const definitions = this.getDefinitions(taskConfiguration.taskType || taskConfiguration.type);\n        let matchedDefinition: TaskDefinition | undefined;\n        let highest = -1;\n        for (const def of definitions) {\n            let score = 0;\n            if (!def.properties.required.every(requiredProp => taskConfiguration[requiredProp] !== undefined)) {\n                continue;\n            }\n            score += def.properties.required.length; // number of required properties\n            const requiredProps = new Set(def.properties.required);\n            // number of optional properties\n            score += def.properties.all.filter(p => !requiredProps.has(p) && taskConfiguration[p] !== undefined).length;\n            if (score > highest) {\n                highest = score;\n                matchedDefinition = def;\n            }\n        }\n        return matchedDefinition;\n    }\n\n    /**\n     * Add a task definition to the registry.\n     *\n     * @param definition the task definition to be added.\n     */\n    register(definition: TaskDefinition): Disposable {\n        const taskType = definition.taskType;\n        const definitions = this.definitions.get(taskType) || [];\n        definitions.push(definition);\n        this.definitions.set(taskType, definitions);\n        this.onDidRegisterTaskDefinitionEmitter.fire(undefined);\n        return Disposable.create(() => {\n            const index = definitions.indexOf(definition);\n            if (index !== -1) {\n                definitions.splice(index, 1);\n            }\n            this.onDidUnregisterTaskDefinitionEmitter.fire(undefined);\n        });\n    }\n\n    compareTasks(one: TaskConfiguration, other: TaskConfiguration): boolean {\n        const oneType = one.taskType || one.type;\n        const otherType = other.taskType || other.type;\n        if (oneType !== otherType) {\n            return false;\n        }\n        const def = this.getDefinition(one);\n        if (def) {\n            const oneScope = new URI(one._scope).path.toString();\n            const otherScope = new URI(other._scope).path.toString();\n            return def.properties.all.every(p => p === 'type' || one[p] === other[p]) && oneScope === otherScope;\n        }\n        return one.label === other.label && one._source === other._source;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { TaskConfiguration, ContributedTaskConfiguration } from '../common';\nimport { TaskDefinitionRegistry } from './task-definition-registry';\n\n@injectable()\nexport class TaskNameResolver {\n    @inject(TaskDefinitionRegistry)\n    protected taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    /**\n     * Returns task name to display.\n     * It is aligned with VS Code.\n     */\n    resolve(task: TaskConfiguration): string {\n        if (this.isDetectedTask(task)) {\n            return `${task.source || task._source}: ${task.label}`;\n        }\n\n        // it is a hack, when task is customized but extension is absent\n        return task.label || `${task.type}: ${task.task}`;\n    }\n\n    private isDetectedTask(task: TaskConfiguration): task is ContributedTaskConfiguration {\n        return !!this.taskDefinitionRegistry.getDefinition(task);\n    }\n}\n","/********************************************************************************\n * Copyright (c) 2019 SAP SE or an SAP affiliate company and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport { TaskConfiguration } from '../common';\n\nexport class TaskNode {\n\n    taskId: TaskConfiguration;\n    childTasks: TaskNode[];\n    parentsID: TaskConfiguration[];\n\n    constructor(taskId: TaskConfiguration, childTasks: TaskNode[], parentsID: TaskConfiguration[]) {\n        this.taskId = taskId;\n        this.childTasks = childTasks;\n        this.parentsID = parentsID;\n    }\n\n    addChildDependency(node: TaskNode): void {\n        this.childTasks.push(node);\n    }\n\n    addParentDependency(parentId: TaskConfiguration): void {\n        this.parentsID.push(parentId);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { Event, Emitter } from '@theia/core/lib/common';\nimport { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';\nimport {\n    ApplyToKind, FileLocationKind, NamedProblemMatcher,\n    ProblemPattern, ProblemMatcher, ProblemMatcherContribution, WatchingMatcher\n} from '../common';\nimport { ProblemPatternRegistry } from './task-problem-pattern-registry';\nimport { Severity } from '@theia/core/lib/common/severity';\n\n@injectable()\nexport class ProblemMatcherRegistry {\n\n    private readonly matchers = new Map<string, NamedProblemMatcher>();\n    private readyPromise: Promise<void>;\n\n    @inject(ProblemPatternRegistry)\n    protected readonly problemPatternRegistry: ProblemPatternRegistry;\n\n    protected readonly onDidChangeProblemMatcherEmitter = new Emitter<void>();\n    get onDidChangeProblemMatcher(): Event<void> {\n        return this.onDidChangeProblemMatcherEmitter.event;\n    }\n\n    @postConstruct()\n    protected init(): void {\n        this.problemPatternRegistry.onReady().then(() => {\n            this.fillDefaults();\n            this.readyPromise = new Promise<void>((res, rej) => res(undefined));\n            this.onDidChangeProblemMatcherEmitter.fire(undefined);\n        });\n    }\n\n    onReady(): Promise<void> {\n        return this.readyPromise;\n    }\n\n    /**\n     * Add a problem matcher to the registry.\n     *\n     * @param definition the problem matcher to be added.\n     */\n    register(matcher: ProblemMatcherContribution): Disposable {\n        if (!matcher.name) {\n            console.error('Only named Problem Matchers can be registered.');\n            return Disposable.NULL;\n        }\n        const toDispose = new DisposableCollection(Disposable.create(() => {\n            /* mark as not disposed */\n            this.onDidChangeProblemMatcherEmitter.fire(undefined);\n        }));\n        this.doRegister(matcher, toDispose).then(() => this.onDidChangeProblemMatcherEmitter.fire(undefined));\n        return toDispose;\n    }\n    protected async doRegister(matcher: ProblemMatcherContribution, toDispose: DisposableCollection): Promise<void> {\n        const problemMatcher = await this.getProblemMatcherFromContribution(matcher);\n        if (toDispose.disposed) {\n            return;\n        }\n        toDispose.push(this.add(problemMatcher as NamedProblemMatcher));\n    }\n\n    /**\n     * Finds the problem matcher from the registry by its name.\n     *\n     * @param name the name of the problem matcher\n     * @return the problem matcher. If the task definition is not found, `undefined` is returned.\n     */\n    get(name: string): NamedProblemMatcher | undefined {\n        if (name.startsWith('$')) {\n            return this.matchers.get(name.slice(1));\n        }\n        return this.matchers.get(name);\n    }\n\n    /**\n     * Returns all registered problem matchers in the registry.\n     */\n    getAll(): NamedProblemMatcher[] {\n        const all: NamedProblemMatcher[] = [];\n        for (const matcherName of this.matchers.keys()) {\n            all.push(this.get(matcherName)!);\n        }\n        all.sort((one, other) => one.name.localeCompare(other.name));\n        return all;\n    }\n\n    /**\n     * Transforms the `ProblemMatcherContribution` to a `ProblemMatcher`\n     *\n     * @return the problem matcher\n     */\n    async getProblemMatcherFromContribution(matcher: ProblemMatcherContribution): Promise<ProblemMatcher> {\n        const { fileLocation, filePrefix } = this.getFileLocationKindAndPrefix(matcher);\n        const patterns: ProblemPattern[] = [];\n        if (matcher.pattern) {\n            if (typeof matcher.pattern === 'string') {\n                await this.problemPatternRegistry.onReady();\n                const registeredPattern = this.problemPatternRegistry.get(matcher.pattern);\n                if (Array.isArray(registeredPattern)) {\n                    patterns.push(...registeredPattern);\n                } else if (!!registeredPattern) {\n                    patterns.push(registeredPattern);\n                }\n            } else if (Array.isArray(matcher.pattern)) {\n                patterns.push(...matcher.pattern.map(p => ProblemPattern.fromProblemPatternContribution(p)));\n            } else {\n                patterns.push(ProblemPattern.fromProblemPatternContribution(matcher.pattern));\n            }\n        }\n        const problemMatcher = {\n            name: matcher.name,\n            label: matcher.label,\n            deprecated: matcher.deprecated,\n            owner: matcher.owner,\n            source: matcher.source,\n            applyTo: ApplyToKind.fromString(matcher.applyTo) || ApplyToKind.allDocuments,\n            fileLocation,\n            filePrefix,\n            pattern: patterns,\n            severity: Severity.fromValue(matcher.severity),\n            watching: WatchingMatcher.fromWatchingMatcherContribution(matcher.background || matcher.watching)\n        };\n        return problemMatcher;\n    }\n\n    private add(matcher: NamedProblemMatcher): Disposable {\n        this.matchers.set(matcher.name, matcher);\n        return Disposable.create(() => this.matchers.delete(matcher.name));\n    }\n\n    private getFileLocationKindAndPrefix(matcher: ProblemMatcherContribution): { fileLocation: FileLocationKind, filePrefix: string } {\n        let fileLocation = FileLocationKind.Relative;\n        let filePrefix = '${workspaceFolder}';\n        if (matcher.fileLocation !== undefined) {\n            if (Array.isArray(matcher.fileLocation)) {\n                if (matcher.fileLocation.length > 0) {\n                    const locationKind = FileLocationKind.fromString(matcher.fileLocation[0]);\n                    if (matcher.fileLocation.length === 1 && locationKind === FileLocationKind.Absolute) {\n                        fileLocation = locationKind;\n                    } else if (matcher.fileLocation.length === 2 && locationKind === FileLocationKind.Relative && matcher.fileLocation[1]) {\n                        fileLocation = locationKind;\n                        filePrefix = matcher.fileLocation[1];\n                    }\n                }\n            } else {\n                const locationKind = FileLocationKind.fromString(matcher.fileLocation);\n                if (locationKind) {\n                    fileLocation = locationKind;\n                    if (locationKind === FileLocationKind.Relative) {\n                        filePrefix = '${workspaceFolder}';\n                    }\n                }\n            }\n        }\n        return { fileLocation, filePrefix };\n    }\n\n    // copied from https://github.com/Microsoft/vscode/blob/1.33.1/src/vs/workbench/contrib/tasks/common/problemMatcher.ts\n    private fillDefaults(): void {\n        this.add({\n            name: 'msCompile',\n            label: 'Microsoft compiler problems',\n            owner: 'msCompile',\n            applyTo: ApplyToKind.allDocuments,\n            fileLocation: FileLocationKind.Absolute,\n            pattern: (this.problemPatternRegistry.get('msCompile'))!\n        });\n\n        this.add({\n            name: 'lessCompile',\n            label: 'Less problems',\n            deprecated: true,\n            owner: 'lessCompile',\n            source: 'less',\n            applyTo: ApplyToKind.allDocuments,\n            fileLocation: FileLocationKind.Absolute,\n            pattern: (this.problemPatternRegistry.get('lessCompile'))!,\n            severity: Severity.Error\n        });\n\n        this.add({\n            name: 'gulp-tsc',\n            label: 'Gulp TSC Problems',\n            owner: 'typescript',\n            source: 'ts',\n            applyTo: ApplyToKind.closedDocuments,\n            fileLocation: FileLocationKind.Relative,\n            filePrefix: '${workspaceFolder}',\n            pattern: (this.problemPatternRegistry.get('gulp-tsc'))!\n        });\n\n        this.add({\n            name: 'jshint',\n            label: 'JSHint problems',\n            owner: 'jshint',\n            source: 'jshint',\n            applyTo: ApplyToKind.allDocuments,\n            fileLocation: FileLocationKind.Absolute,\n            pattern: (this.problemPatternRegistry.get('jshint'))!\n        });\n\n        this.add({\n            name: 'jshint-stylish',\n            label: 'JSHint stylish problems',\n            owner: 'jshint',\n            source: 'jshint',\n            applyTo: ApplyToKind.allDocuments,\n            fileLocation: FileLocationKind.Absolute,\n            pattern: (this.problemPatternRegistry.get('jshint-stylish'))!\n        });\n\n        this.add({\n            name: 'eslint-compact',\n            label: 'ESLint compact problems',\n            owner: 'eslint',\n            source: 'eslint',\n            applyTo: ApplyToKind.allDocuments,\n            fileLocation: FileLocationKind.Absolute,\n            filePrefix: '${workspaceFolder}',\n            pattern: (this.problemPatternRegistry.get('eslint-compact'))!\n        });\n\n        this.add({\n            name: 'eslint-stylish',\n            label: 'ESLint stylish problems',\n            owner: 'eslint',\n            source: 'eslint',\n            applyTo: ApplyToKind.allDocuments,\n            fileLocation: FileLocationKind.Absolute,\n            pattern: (this.problemPatternRegistry.get('eslint-stylish'))!\n        });\n\n        this.add({\n            name: 'go',\n            label: 'Go problems',\n            owner: 'go',\n            source: 'go',\n            applyTo: ApplyToKind.allDocuments,\n            fileLocation: FileLocationKind.Relative,\n            filePrefix: '${workspaceFolder}',\n            pattern: (this.problemPatternRegistry.get('go'))!\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { injectable, postConstruct } from 'inversify';\nimport { NamedProblemPattern, ProblemLocationKind, ProblemPattern, ProblemPatternContribution } from '../common';\nimport { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';\n\n@injectable()\nexport class ProblemPatternRegistry {\n    private readonly patterns = new Map<string, NamedProblemPattern | NamedProblemPattern[]>();\n    private readyPromise: Promise<void>;\n\n    @postConstruct()\n    protected init(): void {\n        this.fillDefaults();\n        this.readyPromise = new Promise<void>((res, rej) => res(undefined));\n    }\n\n    onReady(): Promise<void> {\n        return this.readyPromise;\n    }\n\n    /**\n     * Add a problem pattern to the registry.\n     *\n     * @param definition the problem pattern to be added.\n     */\n    register(value: ProblemPatternContribution | ProblemPatternContribution[]): Disposable {\n        if (Array.isArray(value)) {\n            const toDispose = new DisposableCollection();\n            value.forEach(problemPatternContribution => toDispose.push(this.register(problemPatternContribution)));\n            return toDispose;\n        }\n        if (!value.name) {\n            console.error('Only named Problem Patterns can be registered.');\n            return Disposable.NULL;\n        }\n        const problemPattern = ProblemPattern.fromProblemPatternContribution(value);\n        return this.add(problemPattern.name!, problemPattern);\n    }\n\n    /**\n     * Finds the problem pattern(s) from the registry with the given name.\n     *\n     * @param key the name of the problem patterns\n     * @return a problem pattern or an array of the problem patterns associated with the name. If no problem patterns are found, `undefined` is returned.\n     */\n    get(key: string): undefined | NamedProblemPattern | NamedProblemPattern[] {\n        return this.patterns.get(key);\n    }\n\n    private add(key: string, value: ProblemPattern | ProblemPattern[]): Disposable {\n        let toAdd: NamedProblemPattern | NamedProblemPattern[];\n        if (Array.isArray(value)) {\n            toAdd = value.map(v => Object.assign(v, { name: key }));\n        } else {\n            toAdd = Object.assign(value, { name: key });\n        }\n        this.patterns.set(key, toAdd);\n        return Disposable.create(() => this.patterns.delete(key));\n    }\n\n    // copied from https://github.com/Microsoft/vscode/blob/1.33.1/src/vs/workbench/contrib/tasks/common/problemMatcher.ts\n    private fillDefaults(): void {\n        this.add('msCompile', {\n            regexp: /^(?:\\s+\\d+\\>)?([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\)\\s*:\\s+(error|warning|info)\\s+(\\w{1,2}\\d+)\\s*:\\s*(.*)$/.source,\n            kind: ProblemLocationKind.Location,\n            file: 1,\n            location: 2,\n            severity: 3,\n            code: 4,\n            message: 5\n        });\n        this.add('gulp-tsc', {\n            regexp: /^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(\\d+)\\s+(.*)$/.source,\n            kind: ProblemLocationKind.Location,\n            file: 1,\n            location: 2,\n            code: 3,\n            message: 4\n        });\n        this.add('cpp', {\n            regexp: /^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(error|warning|info)\\s+(C\\d+)\\s*:\\s*(.*)$/.source,\n            kind: ProblemLocationKind.Location,\n            file: 1,\n            location: 2,\n            severity: 3,\n            code: 4,\n            message: 5\n        });\n        this.add('csc', {\n            regexp: /^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(error|warning|info)\\s+(CS\\d+)\\s*:\\s*(.*)$/.source,\n            kind: ProblemLocationKind.Location,\n            file: 1,\n            location: 2,\n            severity: 3,\n            code: 4,\n            message: 5\n        });\n        this.add('vb', {\n            regexp: /^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(error|warning|info)\\s+(BC\\d+)\\s*:\\s*(.*)$/.source,\n            kind: ProblemLocationKind.Location,\n            file: 1,\n            location: 2,\n            severity: 3,\n            code: 4,\n            message: 5\n        });\n        this.add('lessCompile', {\n            regexp: /^\\s*(.*) in file (.*) line no. (\\d+)$/.source,\n            kind: ProblemLocationKind.Location,\n            message: 1,\n            file: 2,\n            line: 3\n        });\n        this.add('jshint', {\n            regexp: /^(.*):\\s+line\\s+(\\d+),\\s+col\\s+(\\d+),\\s(.+?)(?:\\s+\\((\\w)(\\d+)\\))?$/.source,\n            kind: ProblemLocationKind.Location,\n            file: 1,\n            line: 2,\n            character: 3,\n            message: 4,\n            severity: 5,\n            code: 6\n        });\n        this.add('jshint-stylish', [\n            {\n                regexp: /^(.+)$/.source,\n                kind: ProblemLocationKind.Location,\n                file: 1\n            },\n            {\n                regexp: /^\\s+line\\s+(\\d+)\\s+col\\s+(\\d+)\\s+(.+?)(?:\\s+\\((\\w)(\\d+)\\))?$/.source,\n                line: 1,\n                character: 2,\n                message: 3,\n                severity: 4,\n                code: 5,\n                loop: true\n            }\n        ]);\n        this.add('eslint-compact', {\n            regexp: /^(.+):\\sline\\s(\\d+),\\scol\\s(\\d+),\\s(Error|Warning|Info)\\s-\\s(.+)\\s\\((.+)\\)$/.source,\n            file: 1,\n            kind: ProblemLocationKind.Location,\n            line: 2,\n            character: 3,\n            severity: 4,\n            message: 5,\n            code: 6\n        });\n        this.add('eslint-stylish', [\n            {\n                regexp: /^([^\\s].*)$/.source,\n                kind: ProblemLocationKind.Location,\n                file: 1\n            },\n            {\n                regexp: /^\\s+(\\d+):(\\d+)\\s+(error|warning|info)\\s+(.+?)(?:\\s\\s+(.*))?$/.source,\n                line: 1,\n                character: 2,\n                severity: 3,\n                message: 4,\n                code: 5,\n                loop: true\n            }\n        ]);\n        this.add('go', {\n            regexp: /^([^:]*: )?((.:)?[^:]*):(\\d+)(:(\\d+))?: (.*)$/.source,\n            kind: ProblemLocationKind.Location,\n            file: 2,\n            line: 4,\n            character: 6,\n            message: 7\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n// This file is inspired by VSCode and partially copied from https://github.com/Microsoft/vscode/blob/1.33.1/src/vs/workbench/contrib/tasks/common/problemMatcher.ts\n// 'problemMatcher.ts' copyright:\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { injectable, inject, postConstruct } from 'inversify';\nimport { JsonSchemaStore } from '@theia/core/lib/browser/json-schema-store';\nimport { InMemoryResources, deepClone, Emitter } from '@theia/core/lib/common';\nimport { IJSONSchema } from '@theia/core/lib/common/json-schema';\nimport { inputsSchema } from '@theia/variable-resolver/lib/browser/variable-input-schema';\nimport URI from '@theia/core/lib/common/uri';\nimport { ProblemMatcherRegistry } from './task-problem-matcher-registry';\nimport { TaskDefinitionRegistry } from './task-definition-registry';\nimport { TaskServer } from '../common';\n\nexport const taskSchemaId = 'vscode://schemas/tasks';\n\n@injectable()\nexport class TaskSchemaUpdater {\n    @inject(JsonSchemaStore)\n    protected readonly jsonSchemaStore: JsonSchemaStore;\n\n    @inject(InMemoryResources)\n    protected readonly inmemoryResources: InMemoryResources;\n\n    @inject(ProblemMatcherRegistry)\n    protected readonly problemMatcherRegistry: ProblemMatcherRegistry;\n\n    @inject(TaskDefinitionRegistry)\n    protected readonly taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    @inject(TaskServer)\n    protected readonly taskServer: TaskServer;\n\n    protected readonly onDidChangeTaskSchemaEmitter = new Emitter<void>();\n    readonly onDidChangeTaskSchema = this.onDidChangeTaskSchemaEmitter.event;\n\n    @postConstruct()\n    protected init(): void {\n        const taskSchemaUri = new URI(taskSchemaId);\n        this.jsonSchemaStore.onDidChangeSchema(uri => {\n            if (uri.toString() === taskSchemaUri.toString()) {\n                this.onDidChangeTaskSchemaEmitter.fire(undefined);\n            }\n        });\n\n        this.updateProblemMatcherNames();\n        this.updateSupportedTaskTypes();\n        // update problem matcher names in the task schema every time a problem matcher is added or disposed\n        this.problemMatcherRegistry.onDidChangeProblemMatcher(() => this.updateProblemMatcherNames());\n        // update supported task types in the task schema every time a task definition is registered or removed\n        this.taskDefinitionRegistry.onDidRegisterTaskDefinition(() => this.updateSupportedTaskTypes());\n        this.taskDefinitionRegistry.onDidUnregisterTaskDefinition(() => this.updateSupportedTaskTypes());\n    }\n\n    update(): void {\n        const taskSchemaUri = new URI(taskSchemaId);\n\n        taskConfigurationSchema.anyOf = [processTaskConfigurationSchema, ...customizedDetectedTasks, ...customSchemas];\n\n        const schemaContent = this.getStringifiedTaskSchema();\n        try {\n            this.inmemoryResources.update(taskSchemaUri, schemaContent);\n        } catch (e) {\n            this.inmemoryResources.add(taskSchemaUri, schemaContent);\n            this.jsonSchemaStore.registerSchema({\n                fileMatch: ['tasks.json'],\n                url: taskSchemaUri.toString()\n            });\n        }\n    }\n\n    /**\n     * Adds given task schema to `taskConfigurationSchema` as `oneOf` subschema.\n     * Replaces existed subschema by given schema if the corresponding `$id` properties are equal.\n     *\n     * Note: please provide `$id` property for subschema to have ability remove/replace it.\n     * @param schema subschema for adding to `taskConfigurationSchema`\n     */\n    addSubschema(schema: IJSONSchema): void {\n        const schemaId = schema.$id;\n        if (schemaId) {\n            this.doRemoveSubschema(schemaId);\n        }\n\n        customSchemas.push(schema);\n        this.update();\n    }\n\n    /**\n     * Removes task subschema from `taskConfigurationSchema`.\n     *\n     * @param arg `$id` property of subschema\n     */\n    removeSubschema(arg: string): void {\n        const isRemoved = this.doRemoveSubschema(arg);\n        if (isRemoved) {\n            this.update();\n        }\n    }\n\n    /**\n     * Removes task subschema from `customSchemas`, use `update()` to apply the changes for `taskConfigurationSchema`.\n     *\n     * @param arg `$id` property of subschema\n     * @returns `true` if subschema was removed, `false` otherwise\n     */\n    protected doRemoveSubschema(arg: string): boolean {\n        const index = customSchemas.findIndex(existed => !!existed.$id && existed.$id === arg);\n        if (index > -1) {\n            customSchemas.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    /** Returns an array of task types that are registered, including the default types */\n    async getRegisteredTaskTypes(): Promise<string[]> {\n        const serverSupportedTypes = await this.taskServer.getRegisteredTaskTypes();\n        const browserSupportedTypes = this.taskDefinitionRegistry.getAll().map(def => def.taskType);\n        const allTypes = new Set([...serverSupportedTypes, ...browserSupportedTypes]);\n        return Array.from(allTypes.values()).sort();\n    }\n\n    private updateSchemasForRegisteredTasks(): void {\n        customizedDetectedTasks.length = 0;\n        const definitions = this.taskDefinitionRegistry.getAll();\n        definitions.forEach(def => {\n            const customizedDetectedTask = {\n                type: 'object',\n                required: ['type'],\n                properties: {}\n            } as IJSONSchema;\n            const taskType = {\n                ...defaultTaskType,\n                enum: [def.taskType],\n                default: def.taskType,\n                description: 'The task type to customize'\n            };\n            customizedDetectedTask.properties!.type = taskType;\n            def.properties.all.forEach(taskProp => {\n                if (!!def.properties.required.find(requiredProp => requiredProp === taskProp)) { // property is mandatory\n                    customizedDetectedTask.required!.push(taskProp);\n                }\n                customizedDetectedTask.properties![taskProp] = { ...def.properties.schema.properties![taskProp] };\n            });\n            customizedDetectedTask.properties!.problemMatcher = problemMatcher;\n            customizedDetectedTask.properties!.options = commandOptionsSchema;\n            customizedDetectedTask.properties!.group = group;\n            customizedDetectedTask.additionalProperties = true;\n            customizedDetectedTasks.push(customizedDetectedTask);\n        });\n    }\n\n    /** Returns the task's JSON schema */\n    getTaskSchema(): IJSONSchema {\n        return {\n            type: 'object',\n            properties: {\n                version: {\n                    type: 'string'\n                },\n                tasks: {\n                    type: 'array',\n                    items: {\n                        ...deepClone(taskConfigurationSchema)\n                    }\n                },\n                inputs: inputsSchema.definitions!.inputs\n            },\n            additionalProperties: false\n        };\n    }\n\n    /** Returns the task's JSON schema as a string */\n    private getStringifiedTaskSchema(): string {\n        return JSON.stringify(this.getTaskSchema());\n    }\n\n    /** Gets the most up-to-date names of problem matchers from the registry and update the task schema */\n    private updateProblemMatcherNames(): void {\n        const matcherNames = this.problemMatcherRegistry.getAll().map(m => m.name.startsWith('$') ? m.name : `$${m.name}`);\n        problemMatcherNames.length = 0;\n        problemMatcherNames.push(...matcherNames);\n        this.update();\n    }\n\n    private async updateSupportedTaskTypes(): Promise<void> {\n        this.updateSchemasForRegisteredTasks();\n        this.update();\n    }\n}\n\nconst commandSchema: IJSONSchema = {\n    type: 'string',\n    description: 'The actual command or script to execute'\n};\n\nconst commandArgSchema: IJSONSchema = {\n    type: 'array',\n    description: 'A list of strings, each one being one argument to pass to the command',\n    items: {\n        type: 'string'\n    }\n};\n\nconst commandOptionsSchema: IJSONSchema = {\n    type: 'object',\n    description: 'The command options used when the command is executed',\n    properties: {\n        cwd: {\n            type: 'string',\n            description: 'The directory in which the command will be executed',\n            default: '${workspaceFolder}'\n        },\n        env: {\n            type: 'object',\n            description: 'The environment of the executed program or shell. If omitted the parent process\\' environment is used'\n        },\n        shell: {\n            type: 'object',\n            description: 'Configuration of the shell when task type is `shell`',\n            properties: {\n                executable: {\n                    type: 'string',\n                    description: 'The shell to use'\n                },\n                args: {\n                    type: 'array',\n                    description: `The arguments to be passed to the shell executable to run in command mode\n                        (e.g ['-c'] for bash or ['/S', '/C'] for cmd.exe)`,\n                    items: {\n                        type: 'string'\n                    }\n                }\n            }\n        }\n    }\n};\n\nconst problemMatcherNames: string[] = [];\nconst defaultTaskTypes = ['shell', 'process'];\nconst supportedTaskTypes = [...defaultTaskTypes];\nconst taskLabel = {\n    type: 'string',\n    description: 'A unique string that identifies the task that is also used as task\\'s user interface label'\n};\nconst defaultTaskType = {\n    type: 'string',\n    enum: supportedTaskTypes,\n    default: defaultTaskTypes[0],\n    description: 'Determines what type of process will be used to execute the task. Only shell types will have output shown on the user interface'\n};\nconst commandAndArgs = {\n    command: commandSchema,\n    args: commandArgSchema,\n    options: commandOptionsSchema\n};\n\nconst group = {\n    oneOf: [\n        {\n            type: 'string'\n        },\n        {\n            type: 'object',\n            properties: {\n                kind: {\n                    type: 'string',\n                    default: 'none',\n                    description: 'The task\\'s execution group.'\n                },\n                isDefault: {\n                    type: 'boolean',\n                    default: false,\n                    description: 'Defines if this task is the default task in the group.'\n                }\n            }\n        }\n    ],\n    enum: [\n        { kind: 'build', isDefault: true },\n        { kind: 'test', isDefault: true },\n        'build',\n        'test',\n        'none'\n    ],\n    enumDescriptions: [\n        'Marks the task as the default build task.',\n        'Marks the task as the default test task.',\n        'Marks the task as a build task accessible through the \\'Run Build Task\\' command.',\n        'Marks the task as a test task accessible through the \\'Run Test Task\\' command.',\n        'Assigns the task to no group'\n    ],\n    // eslint-disable-next-line max-len\n    description: 'Defines to which execution group this task belongs to. It supports \"build\" to add it to the build group and \"test\" to add it to the test group.'\n};\n\nconst problemPattern: IJSONSchema = {\n    default: {\n        regexp: '^([^\\\\\\\\s].*)\\\\\\\\((\\\\\\\\d+,\\\\\\\\d+)\\\\\\\\):\\\\\\\\s*(.*)$',\n        file: 1,\n        location: 2,\n        message: 3\n    },\n    type: 'object',\n    properties: {\n        regexp: {\n            type: 'string',\n            description: 'The regular expression to find an error, warning or info in the output.'\n        },\n        kind: {\n            type: 'string',\n            description: 'whether the pattern matches a location (file and line) or only a file.'\n        },\n        file: {\n            type: 'integer',\n            description: 'The match group index of the filename. If omitted 1 is used.'\n        },\n        location: {\n            type: 'integer',\n            // eslint-disable-next-line max-len\n            description: 'The match group index of the problem\\'s location. Valid location patterns are: (line), (line,column) and (startLine,startColumn,endLine,endColumn). If omitted (line,column) is assumed.'\n        },\n        line: {\n            type: 'integer',\n            description: 'The match group index of the problem\\'s line. Defaults to 2'\n        },\n        column: {\n            type: 'integer',\n            description: 'The match group index of the problem\\'s line character. Defaults to 3'\n        },\n        endLine: {\n            type: 'integer',\n            description: 'The match group index of the problem\\'s end line. Defaults to undefined'\n        },\n        endColumn: {\n            type: 'integer',\n            description: 'The match group index of the problem\\'s end line character. Defaults to undefined'\n        },\n        severity: {\n            type: 'integer',\n            description: 'The match group index of the problem\\'s severity. Defaults to undefined'\n        },\n        code: {\n            type: 'integer',\n            description: 'The match group index of the problem\\'s code. Defaults to undefined'\n        },\n        message: {\n            type: 'integer',\n            description: 'The match group index of the message. If omitted it defaults to 4 if location is specified. Otherwise it defaults to 5.'\n        },\n        loop: {\n            type: 'boolean',\n            // eslint-disable-next-line max-len\n            description: 'In a multi line matcher loop indicated whether this pattern is executed in a loop as long as it matches. Can only specified on a last pattern in a multi line pattern.'\n        }\n    }\n};\n\nconst multiLineProblemPattern: IJSONSchema = {\n    type: 'array',\n    items: problemPattern\n};\n\nconst watchingPattern: IJSONSchema = {\n    type: 'object',\n    additionalProperties: false,\n    properties: {\n        regexp: {\n            type: 'string',\n            description: 'The regular expression to detect the begin or end of a background task.'\n        },\n        file: {\n            type: 'integer',\n            description: 'The match group index of the filename. Can be omitted.'\n        },\n    }\n};\n\nconst patternType: IJSONSchema = {\n    anyOf: [\n        {\n            type: 'string',\n            description: 'The name of a contributed or predefined pattern'\n        },\n        problemPattern,\n        multiLineProblemPattern\n    ],\n    description: 'A problem pattern or the name of a contributed or predefined problem pattern. Can be omitted if base is specified.'\n};\n\nconst problemMatcherObject: IJSONSchema = {\n    type: 'object',\n    properties: {\n        base: {\n            type: 'string',\n            description: 'The name of a base problem matcher to use.'\n        },\n        owner: {\n            type: 'string',\n            description: 'The owner of the problem inside Code. Can be omitted if base is specified. Defaults to \\'external\\' if omitted and base is not specified.'\n        },\n        source: {\n            type: 'string',\n            description: 'A human-readable string describing the source of this diagnostic, e.g. \\'typescript\\' or \\'super lint\\'.'\n        },\n        severity: {\n            type: 'string',\n            enum: ['error', 'warning', 'info'],\n            description: 'The default severity for captures problems. Is used if the pattern doesn\\'t define a match group for severity.'\n        },\n        applyTo: {\n            type: 'string',\n            enum: ['allDocuments', 'openDocuments', 'closedDocuments'],\n            description: 'Controls if a problem reported on a text document is applied only to open, closed or all documents.'\n        },\n        pattern: patternType,\n        fileLocation: {\n            oneOf: [\n                {\n                    type: 'string',\n                    enum: ['absolute', 'relative', 'autoDetect']\n                },\n                {\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                }\n            ],\n            description: 'Defines how file names reported in a problem pattern should be interpreted.'\n        },\n        background: {\n            type: 'object',\n            additionalProperties: false,\n            description: 'Patterns to track the begin and end of a matcher active on a background task.',\n            properties: {\n                activeOnStart: {\n                    type: 'boolean',\n                    description: 'If set to true the background monitor is in active mode when the task starts. This is equals of issuing a line that matches the beginsPattern'\n                },\n                beginsPattern: {\n                    oneOf: [\n                        {\n                            type: 'string'\n                        },\n                        watchingPattern\n                    ],\n                    description: 'If matched in the output the start of a background task is signaled.'\n                },\n                endsPattern: {\n                    oneOf: [\n                        {\n                            type: 'string'\n                        },\n                        watchingPattern\n                    ],\n                    description: 'If matched in the output the end of a background task is signaled.'\n                }\n            }\n        },\n        watching: {\n            type: 'object',\n            additionalProperties: false,\n            deprecationMessage: 'The watching property is deprecated. Use background instead.',\n            description: 'Patterns to track the begin and end of a watching matcher.',\n            properties: {\n                activeOnStart: {\n                    type: 'boolean',\n                    description: 'If set to true the watcher is in active mode when the task starts. This is equals of issuing a line that matches the beginPattern'\n                },\n                beginsPattern: {\n                    oneOf: [\n                        {\n                            type: 'string'\n                        },\n                        watchingPattern\n                    ],\n                    description: 'If matched in the output the start of a watching task is signaled.'\n                },\n                endsPattern: {\n                    oneOf: [\n                        {\n                            type: 'string'\n                        },\n                        watchingPattern\n                    ],\n                    description: 'If matched in the output the end of a watching task is signaled.'\n                }\n            }\n        }\n    }\n};\n\nconst problemMatcher = {\n    anyOf: [\n        {\n            type: 'string',\n            description: 'Name of the problem matcher to parse the output of the task',\n            enum: problemMatcherNames\n        },\n        {\n            type: 'array',\n            description: 'Name(s) of the problem matcher(s) to parse the output of the task',\n            items: {\n                type: 'string',\n                enum: problemMatcherNames\n            }\n        },\n        problemMatcherObject,\n        {\n            type: 'array',\n            description: 'User defined problem matcher(s) to parse the output of the task',\n            items: problemMatcherObject\n        }\n    ]\n};\n\nconst presentation: IJSONSchema = {\n    type: 'object',\n    default: {\n        reveal: 'always',\n        focus: false\n    },\n    description: 'Configures the panel that is used to present the task\\'s output and reads its input.',\n    additionalProperties: true,\n    properties: {\n        focus: {\n            type: 'boolean',\n            default: false,\n            description: 'Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.'\n        },\n        reveal: {\n            type: 'string',\n            enum: ['always', 'silent', 'never'],\n            enumDescriptions: [\n                'Always reveals the terminal when this task is executed.',\n                'Only reveals the terminal if the task exits with an error or the problem matcher finds an error.',\n                'Never reveals the terminal when this task is executed.'\n            ],\n            default: 'always',\n            description: 'Controls whether the terminal running the task is revealed or not. May be overridden by option \\\"revealProblems\\\". Default is \\\"always\\\".'\n        }\n    }\n};\n\nconst taskIdentifier: IJSONSchema = {\n    type: 'object',\n    additionalProperties: true,\n    properties: {\n        type: {\n            type: 'string',\n            description: 'The task identifier.'\n        }\n    }\n};\n\nconst processTaskConfigurationSchema: IJSONSchema = {\n    type: 'object',\n    required: ['type', 'label', 'command'],\n    properties: {\n        label: taskLabel,\n        type: defaultTaskType,\n        ...commandAndArgs,\n        isBackground: {\n            type: 'boolean',\n            default: false,\n            description: 'Whether the executed task is kept alive and is running in the background.'\n        },\n        dependsOn: {\n            anyOf: [\n                {\n                    type: 'string',\n                    description: 'Another task this task depends on.'\n                },\n                taskIdentifier,\n                {\n                    type: 'array',\n                    description: 'The other tasks this task depends on.',\n                    items: {\n                        anyOf: [\n                            {\n                                type: 'string'\n                            },\n                            taskIdentifier\n                        ]\n                    }\n                }\n            ],\n            description: 'Either a string representing another task or an array of other tasks that this task depends on.'\n        },\n        dependsOrder: {\n            type: 'string',\n            enum: ['parallel', 'sequence'],\n            enumDescriptions: [\n                'Run all dependsOn tasks in parallel.',\n                'Run all dependsOn tasks in sequence.'\n            ],\n            default: 'parallel',\n            description: 'Determines the order of the dependsOn tasks for this task. Note that this property is not recursive.'\n        },\n        windows: {\n            type: 'object',\n            description: 'Windows specific command configuration that overrides the command, args, and options',\n            properties: commandAndArgs\n        },\n        osx: {\n            type: 'object',\n            description: 'MacOS specific command configuration that overrides the command, args, and options',\n            properties: commandAndArgs\n        },\n        linux: {\n            type: 'object',\n            description: 'Linux specific command configuration that overrides the default command, args, and options',\n            properties: commandAndArgs\n        },\n        group,\n        problemMatcher,\n        presentation\n    },\n    additionalProperties: true\n};\n\nconst customizedDetectedTasks: IJSONSchema[] = [];\nconst customSchemas: IJSONSchema[] = [];\n\nconst taskConfigurationSchema: IJSONSchema = {\n    $id: taskSchemaId,\n    anyOf: [processTaskConfigurationSchema, ...customizedDetectedTasks, ...customSchemas]\n};\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ApplicationShell, FrontendApplication, WidgetManager } from '@theia/core/lib/browser';\nimport { open, OpenerService } from '@theia/core/lib/browser/opener-service';\nimport { ILogger, CommandService } from '@theia/core/lib/common';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { QuickPickItem, QuickPickService } from '@theia/core/lib/common/quick-pick-service';\nimport { LabelProvider } from '@theia/core/lib/browser/label-provider';\nimport URI from '@theia/core/lib/common/uri';\nimport { EditorManager } from '@theia/editor/lib/browser';\nimport { ProblemManager } from '@theia/markers/lib/browser/problem/problem-manager';\nimport { TerminalService } from '@theia/terminal/lib/browser/base/terminal-service';\nimport { TerminalWidget } from '@theia/terminal/lib/browser/base/terminal-widget';\nimport { TerminalWidgetFactoryOptions, TERMINAL_WIDGET_FACTORY_ID } from '@theia/terminal/lib/browser/terminal-widget-impl';\nimport { VariableResolverService } from '@theia/variable-resolver/lib/browser';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { inject, injectable, named, postConstruct } from 'inversify';\nimport { DiagnosticSeverity, Range } from 'vscode-languageserver-types';\nimport {\n    NamedProblemMatcher,\n    ProblemMatchData,\n    ProblemMatcher,\n    RunTaskOption,\n    TaskConfiguration,\n    TaskCustomization,\n    TaskExitedEvent,\n    TaskInfo,\n    TaskOutputProcessedEvent,\n    BackgroundTaskEndedEvent,\n    TaskDefinition,\n    TaskServer,\n    TaskIdentifier,\n    DependsOrder,\n    RevealKind\n} from '../common';\nimport { TaskWatcher } from '../common/task-watcher';\nimport { ProvidedTaskConfigurations } from './provided-task-configurations';\nimport { TaskConfigurationClient, TaskConfigurations } from './task-configurations';\nimport { TaskProviderRegistry, TaskResolverRegistry } from './task-contribution';\nimport { TaskDefinitionRegistry } from './task-definition-registry';\nimport { TaskNameResolver } from './task-name-resolver';\nimport { TaskSourceResolver } from './task-source-resolver';\nimport { ProblemMatcherRegistry } from './task-problem-matcher-registry';\nimport { TaskSchemaUpdater } from './task-schema-updater';\nimport { TaskConfigurationManager } from './task-configuration-manager';\nimport { PROBLEMS_WIDGET_ID, ProblemWidget } from '@theia/markers/lib/browser/problem/problem-widget';\nimport { TaskNode } from './task-node';\n\nexport interface QuickPickProblemMatcherItem {\n    problemMatchers: NamedProblemMatcher[] | undefined;\n    learnMore?: boolean;\n}\n\ninterface TaskGraphNode {\n    taskConfiguration: TaskConfiguration;\n    node: TaskNode;\n}\n\nexport enum TaskEndedTypes {\n    TaskExited,\n    BackgroundTaskEnded\n}\n\nexport interface TaskEndedInfo {\n    taskEndedType: TaskEndedTypes,\n    value: number | boolean | undefined\n}\n\n@injectable()\nexport class TaskService implements TaskConfigurationClient {\n\n    /**\n     * The last executed task.\n     */\n    protected lastTask: { source: string, taskLabel: string } | undefined = undefined;\n    protected cachedRecentTasks: TaskConfiguration[] = [];\n    protected runningTasks = new Map<number, {\n        exitCode: Deferred<number | undefined>,\n        terminateSignal: Deferred<string | undefined>,\n        isBackgroundTaskEnded: Deferred<boolean | undefined>\n    }>();\n\n    @inject(FrontendApplication)\n    protected readonly app: FrontendApplication;\n\n    @inject(ApplicationShell)\n    protected readonly shell: ApplicationShell;\n\n    @inject(TaskServer)\n    protected readonly taskServer: TaskServer;\n\n    @inject(ILogger) @named('task')\n    protected readonly logger: ILogger;\n\n    @inject(WidgetManager)\n    protected readonly widgetManager: WidgetManager;\n\n    @inject(TaskWatcher)\n    protected readonly taskWatcher: TaskWatcher;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(TaskConfigurations)\n    protected readonly taskConfigurations: TaskConfigurations;\n\n    @inject(ProvidedTaskConfigurations)\n    protected readonly providedTaskConfigurations: ProvidedTaskConfigurations;\n\n    @inject(VariableResolverService)\n    protected readonly variableResolverService: VariableResolverService;\n\n    @inject(TaskResolverRegistry)\n    protected readonly taskResolverRegistry: TaskResolverRegistry;\n\n    @inject(TerminalService)\n    protected readonly terminalService: TerminalService;\n\n    @inject(EditorManager)\n    protected readonly editorManager: EditorManager;\n\n    @inject(ProblemManager)\n    protected readonly problemManager: ProblemManager;\n\n    @inject(TaskDefinitionRegistry)\n    protected readonly taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    @inject(ProblemMatcherRegistry)\n    protected readonly problemMatcherRegistry: ProblemMatcherRegistry;\n\n    @inject(QuickPickService)\n    protected readonly quickPick: QuickPickService;\n\n    @inject(OpenerService)\n    protected readonly openerService: OpenerService;\n\n    @inject(TaskNameResolver)\n    protected readonly taskNameResolver: TaskNameResolver;\n\n    @inject(TaskSourceResolver)\n    protected readonly taskSourceResolver: TaskSourceResolver;\n\n    @inject(TaskSchemaUpdater)\n    protected readonly taskSchemaUpdater: TaskSchemaUpdater;\n\n    @inject(TaskConfigurationManager)\n    protected readonly taskConfigurationManager: TaskConfigurationManager;\n\n    @inject(CommandService)\n    protected readonly commands: CommandService;\n\n    @inject(LabelProvider)\n    protected readonly labelProvider: LabelProvider;\n    /**\n     * @deprecated To be removed in 0.5.0\n     */\n    @inject(TaskProviderRegistry)\n    protected readonly taskProviderRegistry: TaskProviderRegistry;\n\n    @postConstruct()\n    protected init(): void {\n        this.getRunningTasks().then(tasks =>\n            tasks.forEach(task => {\n                if (!this.runningTasks.has(task.taskId)) {\n                    this.runningTasks.set(task.taskId, {\n                        exitCode: new Deferred<number | undefined>(), terminateSignal: new Deferred<string | undefined>(),\n                        isBackgroundTaskEnded: new Deferred<boolean | undefined>()\n                    });\n                }\n            }));\n\n        // notify user that task has started\n        this.taskWatcher.onTaskCreated((event: TaskInfo) => {\n            if (!this.isEventForThisClient(event.ctx)) {\n                return;\n            }\n            this.runningTasks.set(event.taskId, {\n                exitCode: new Deferred<number | undefined>(),\n                terminateSignal: new Deferred<string | undefined>(),\n                isBackgroundTaskEnded: new Deferred<boolean | undefined>()\n            });\n            const taskConfig = event.config;\n            const taskIdentifier = taskConfig ? this.getTaskIdentifier(taskConfig) : event.taskId.toString();\n            this.messageService.info(`Task '${taskIdentifier}' has been started.`);\n        });\n\n        this.taskWatcher.onOutputProcessed(async (event: TaskOutputProcessedEvent) => {\n            if (!this.isEventForThisClient(event.ctx)) {\n                return;\n            }\n            if (event.problems) {\n                const runningTasksInfo: TaskInfo[] = await this.getRunningTasks();\n                // check if the task is active\n                const matchedRunningTaskInfo = runningTasksInfo.find(taskInfo => {\n                    const taskConfig = taskInfo.config;\n                    return this.taskDefinitionRegistry.compareTasks(taskConfig, event.config);\n                });\n                const isTaskActiveAndOutputSilent = matchedRunningTaskInfo &&\n                    matchedRunningTaskInfo.config.presentation && matchedRunningTaskInfo.config.presentation.reveal === RevealKind.Silent;\n                event.problems.forEach(problem => {\n                    const existingMarkers = this.problemManager.findMarkers({ owner: problem.description.owner });\n                    const uris = new Set<string>();\n                    existingMarkers.forEach(marker => uris.add(marker.uri));\n                    if (ProblemMatchData.is(problem) && problem.resource) {\n                        // When task.presentation.reveal === RevealKind.Silent, put focus on the terminal only if it is an error\n                        if (isTaskActiveAndOutputSilent && problem.marker.severity === DiagnosticSeverity.Error) {\n                            const terminalId = matchedRunningTaskInfo!.terminalId;\n                            if (terminalId) {\n                                const terminal = this.terminalService.getById(this.getTerminalWidgetId(terminalId));\n                                if (terminal) {\n                                    const focus = !!matchedRunningTaskInfo!.config.presentation!.focus;\n                                    if (focus) { // assign focus to the terminal if presentation.focus is true\n                                        this.shell.activateWidget(terminal.id);\n                                    } else { // show the terminal but not assign focus\n                                        this.shell.revealWidget(terminal.id);\n                                    }\n                                }\n                            }\n                        }\n                        const uri = new URI(problem.resource.path).withScheme(problem.resource.scheme);\n                        if (uris.has(uri.toString())) {\n                            const newData = [\n                                ...existingMarkers\n                                    .filter(marker => marker.uri === uri.toString())\n                                    .map(markerData => markerData.data),\n                                problem.marker\n                            ];\n                            this.problemManager.setMarkers(uri, problem.description.owner, newData);\n                        } else {\n                            this.problemManager.setMarkers(uri, problem.description.owner, [problem.marker]);\n                        }\n                    } else { // should have received an event for finding the \"background task begins\" pattern\n                        uris.forEach(uriString => this.problemManager.setMarkers(new URI(uriString), problem.description.owner, []));\n                    }\n                });\n            }\n        });\n\n        this.taskWatcher.onBackgroundTaskEnded((event: BackgroundTaskEndedEvent) => {\n            if (!this.isEventForThisClient(event.ctx)) {\n                return;\n            }\n\n            if (!this.runningTasks.has(event.taskId)) {\n                this.runningTasks.set(event.taskId, {\n                    exitCode: new Deferred<number | undefined>(),\n                    terminateSignal: new Deferred<string | undefined>(),\n                    isBackgroundTaskEnded: new Deferred<boolean | undefined>()\n                });\n            }\n            this.runningTasks.get(event.taskId)!.isBackgroundTaskEnded.resolve(true);\n        });\n\n        // notify user that task has finished\n        this.taskWatcher.onTaskExit((event: TaskExitedEvent) => {\n            if (!this.isEventForThisClient(event.ctx)) {\n                return;\n            }\n            if (!this.runningTasks.has(event.taskId)) {\n                this.runningTasks.set(event.taskId, {\n                    exitCode: new Deferred<number | undefined>(),\n                    terminateSignal: new Deferred<string | undefined>(),\n                    isBackgroundTaskEnded: new Deferred<boolean | undefined>()\n                });\n            }\n            this.runningTasks.get(event.taskId)!.exitCode.resolve(event.code);\n            this.runningTasks.get(event.taskId)!.terminateSignal.resolve(event.signal);\n            setTimeout(() => this.runningTasks.delete(event.taskId), 60 * 1000);\n\n            const taskConfig = event.config;\n            const taskIdentifier = taskConfig ? this.getTaskIdentifier(taskConfig) : event.taskId.toString();\n            if (event.code !== undefined) {\n                const message = `Task '${taskIdentifier}' has exited with code ${event.code}.`;\n                if (event.code === 0) {\n                    this.messageService.info(message);\n                } else {\n                    const eventTaskConfig = event.config;\n                    if (eventTaskConfig && eventTaskConfig.presentation && eventTaskConfig.presentation.reveal === RevealKind.Silent && event.terminalId) {\n                        const terminal = this.terminalService.getById(this.getTerminalWidgetId(event.terminalId));\n                        const focus = !!eventTaskConfig.presentation.focus;\n                        if (terminal) {\n                            if (focus) { // assign focus to the terminal if presentation.focus is true\n                                this.shell.activateWidget(terminal.id);\n                            } else { // show the terminal but not assign focus\n                                this.shell.revealWidget(terminal.id);\n                            }\n                        }\n                    }\n                    this.messageService.error(message);\n                }\n            } else if (event.signal !== undefined) {\n                this.messageService.info(`Task '${taskIdentifier}' was terminated by signal ${event.signal}.`);\n            } else {\n                console.error('Invalid TaskExitedEvent received, neither code nor signal is set.');\n            }\n        });\n    }\n\n    private getTaskIdentifier(taskConfig: TaskConfiguration): string {\n        const taskName = this.taskNameResolver.resolve(taskConfig);\n        const sourceStrUri = this.taskSourceResolver.resolve(taskConfig);\n        return `${taskName} (${this.labelProvider.getName(new URI(sourceStrUri))})`;\n    }\n\n    /** Returns an array of the task configurations configured in tasks.json and provided by the extensions. */\n    async getTasks(): Promise<TaskConfiguration[]> {\n        const configuredTasks = await this.getConfiguredTasks();\n        const providedTasks = await this.getProvidedTasks();\n        const notCustomizedProvidedTasks = providedTasks.filter(provided =>\n            !configuredTasks.some(configured => this.taskDefinitionRegistry.compareTasks(configured, provided))\n        );\n        return [...configuredTasks, ...notCustomizedProvidedTasks];\n    }\n\n    /** Returns an array of the valid task configurations which are configured in tasks.json files */\n    async getConfiguredTasks(): Promise<TaskConfiguration[]> {\n        const invalidTaskConfig = this.taskConfigurations.getInvalidTaskConfigurations()[0];\n        if (invalidTaskConfig) {\n            const widget = <ProblemWidget>await this.widgetManager.getOrCreateWidget(PROBLEMS_WIDGET_ID);\n            const isProblemsWidgetVisible = widget && widget.isVisible;\n            const currentEditorUri = this.editorManager.currentEditor && this.editorManager.currentEditor.editor.getResourceUri();\n            let isInvalidTaskConfigFileOpen = false;\n            if (currentEditorUri) {\n                const folderUri = this.workspaceService.getWorkspaceRootUri(currentEditorUri);\n                if (folderUri && folderUri.toString() === invalidTaskConfig._scope) {\n                    isInvalidTaskConfigFileOpen = true;\n                }\n            }\n            const warningMessage = 'Invalid task configurations are found. Open tasks.json and find details in the Problems view.';\n            if (!isProblemsWidgetVisible || !isInvalidTaskConfigFileOpen) {\n                this.messageService.warn(warningMessage, 'Open').then(actionOpen => {\n                    if (actionOpen) {\n                        if (invalidTaskConfig && invalidTaskConfig._scope) {\n                            this.taskConfigurationManager.openConfiguration(invalidTaskConfig._scope);\n                        }\n                        if (!isProblemsWidgetVisible) {\n                            this.commands.executeCommand('problemsView:toggle');\n                        }\n                    }\n                });\n            } else {\n                this.messageService.warn(warningMessage);\n            }\n        }\n\n        const validTaskConfigs = await this.taskConfigurations.getTasks();\n        return validTaskConfigs;\n    }\n\n    /** Returns an array of the task configurations which are provided by the extensions. */\n    getProvidedTasks(): Promise<TaskConfiguration[]> {\n        return this.providedTaskConfigurations.getTasks();\n    }\n\n    addRecentTasks(tasks: TaskConfiguration | TaskConfiguration[]): void {\n        if (Array.isArray(tasks)) {\n            tasks.forEach(task => this.addRecentTasks(task));\n        } else {\n            const ind = this.cachedRecentTasks.findIndex(recent => this.taskDefinitionRegistry.compareTasks(recent, tasks));\n            if (ind >= 0) {\n                this.cachedRecentTasks.splice(ind, 1);\n            }\n            this.cachedRecentTasks.unshift(tasks);\n        }\n    }\n\n    get recentTasks(): TaskConfiguration[] {\n        return this.cachedRecentTasks;\n    }\n\n    set recentTasks(recent: TaskConfiguration[]) {\n        this.cachedRecentTasks = recent;\n    }\n\n    /**\n     * Clears the list of recently used tasks.\n     */\n    clearRecentTasks(): void {\n        this.cachedRecentTasks = [];\n    }\n\n    /**\n     * Returns a task configuration provided by an extension by task source and label.\n     * If there are no task configuration, returns undefined.\n     */\n    async getProvidedTask(source: string, label: string, scope?: string): Promise<TaskConfiguration | undefined> {\n        return this.providedTaskConfigurations.getTask(source, label, scope);\n    }\n\n    /** Returns an array of running tasks 'TaskInfo' objects */\n    getRunningTasks(): Promise<TaskInfo[]> {\n        return this.taskServer.getTasks(this.getContext());\n    }\n\n    /** Returns an array of task types that are registered, including the default types */\n    getRegisteredTaskTypes(): Promise<string[]> {\n        return this.taskSchemaUpdater.getRegisteredTaskTypes();\n    }\n\n    /**\n     * Get the last executed task.\n     *\n     * @returns the last executed task or `undefined`.\n     */\n    getLastTask(): { source: string, taskLabel: string } | undefined {\n        return this.lastTask;\n    }\n\n    /**\n     * Runs a task, by task configuration label.\n     * Note, it looks for a task configured in tasks.json only.\n     */\n    async runConfiguredTask(source: string, taskLabel: string): Promise<void> {\n        const task = this.taskConfigurations.getTask(source, taskLabel);\n        if (!task) {\n            this.logger.error(`Can't get task launch configuration for label: ${taskLabel}`);\n            return;\n        }\n\n        this.run(source, taskLabel);\n    }\n\n    /**\n     * Run the last executed task.\n     */\n    async runLastTask(): Promise<TaskInfo | undefined> {\n        if (!this.lastTask) {\n            return;\n        }\n        const { source, taskLabel } = this.lastTask;\n        return this.run(source, taskLabel);\n    }\n\n    /**\n     * Runs a task, by the source and label of the task configuration.\n     * It looks for configured and detected tasks.\n     */\n    async run(source: string, taskLabel: string, scope?: string): Promise<TaskInfo | undefined> {\n        let task = await this.getProvidedTask(source, taskLabel, scope);\n        if (!task) { // if a detected task cannot be found, search from tasks.json\n            task = this.taskConfigurations.getTask(source, taskLabel);\n            if (!task) {\n                this.logger.error(`Can't get task launch configuration for label: ${taskLabel}`);\n                return;\n            }\n        }\n        const customizationObject = await this.getTaskCustomization(task);\n\n        if (!customizationObject.problemMatcher) {\n            // ask the user what s/he wants to use to parse the task output\n            const items = this.getCustomizeProblemMatcherItems();\n            const selected = await this.quickPick.show(items, {\n                placeholder: 'Select for which kind of errors and warnings to scan the task output'\n            });\n            if (selected) {\n                if (selected.problemMatchers) {\n                    let matcherNames: string[] = [];\n                    if (selected.problemMatchers && selected.problemMatchers.length === 0) { // never parse output for this task\n                        matcherNames = [];\n                    } else if (selected.problemMatchers && selected.problemMatchers.length > 0) { // continue with user-selected parser\n                        matcherNames = selected.problemMatchers.map(matcher => matcher.name);\n                    }\n                    customizationObject.problemMatcher = matcherNames;\n\n                    // write the selected matcher (or the decision of \"never parse\") into the `tasks.json`\n                    this.updateTaskConfiguration(task, { problemMatcher: matcherNames });\n                } else if (selected.learnMore) { // user wants to learn more about parsing task output\n                    open(this.openerService, new URI('https://code.visualstudio.com/docs/editor/tasks#_processing-task-output-with-problem-matchers'));\n                }\n                // else, continue the task with no parser\n            } else { // do not start the task in case that the user did not select any item from the list\n                return;\n            }\n        }\n\n        const tasks = await this.getWorkspaceTasks(task._scope);\n        const resolvedMatchers = await this.resolveProblemMatchers(task, customizationObject);\n        try {\n            const rootNode = new TaskNode(task, [], []);\n            this.detectDirectedAcyclicGraph(task, rootNode, tasks);\n        } catch (error) {\n            this.logger.error(error.message);\n            this.messageService.error(error.message);\n            return undefined;\n        }\n        return this.runTasksGraph(task, tasks, {\n            customization: { ...customizationObject, ...{ problemMatcher: resolvedMatchers } }\n        }).catch(error => {\n            console.log(error.message);\n            return undefined;\n        });\n    }\n\n    /**\n     * A recursive function that runs a task and all its sub tasks that it depends on.\n     * A task can be executed only when all of its dependencies have been executed, or when it doesn’t have any dependencies at all.\n     */\n    async runTasksGraph(task: TaskConfiguration, tasks: TaskConfiguration[], option?: RunTaskOption): Promise<TaskInfo | undefined> {\n        if (task && task.dependsOn) {\n            // In case it is an array of task dependencies\n            if (Array.isArray(task.dependsOn) && task.dependsOn.length > 0) {\n                const dependentTasks: { 'task': TaskConfiguration; 'taskCustomization': TaskCustomization; 'resolvedMatchers': ProblemMatcher[] | undefined }[] = [];\n                for (let i = 0; i < task.dependsOn.length; i++) {\n                    // It may be a string (a task label) or a JSON object which represents a TaskIdentifier (e.g. {\"type\":\"npm\", \"script\":\"script1\"})\n                    const taskIdentifier = task.dependsOn[i];\n                    const dependentTask = this.getDependentTask(taskIdentifier, tasks);\n                    const taskCustomization = await this.getTaskCustomization(dependentTask);\n                    const resolvedMatchers = await this.resolveProblemMatchers(dependentTask, taskCustomization);\n                    dependentTasks.push({ 'task': dependentTask, 'taskCustomization': taskCustomization, 'resolvedMatchers': resolvedMatchers });\n                    // In case the 'dependsOrder' is 'sequence'\n                    if (task.dependsOrder && task.dependsOrder === DependsOrder.Sequence) {\n                        await this.runTasksGraph(dependentTask, tasks, {\n                            customization: { ...taskCustomization, ...{ problemMatcher: resolvedMatchers } }\n                        });\n                    }\n                }\n                // In case the 'dependsOrder' is 'parallel'\n                if (((!task.dependsOrder) || (task.dependsOrder && task.dependsOrder === DependsOrder.Parallel))) {\n                    const promises = dependentTasks.map(item =>\n                        this.runTasksGraph(item.task, tasks, {\n                            customization: { ...item.taskCustomization, ...{ problemMatcher: item.resolvedMatchers } }\n                        })\n                    );\n                    await Promise.all(promises);\n                }\n            } else if (!Array.isArray(task.dependsOn)) {\n                // In case it is a string (a task label) or a JSON object which represents a TaskIdentifier (e.g. {\"type\":\"npm\", \"script\":\"script1\"})\n                const taskIdentifier = task.dependsOn;\n                const dependentTask = this.getDependentTask(taskIdentifier, tasks);\n                const taskCustomization = await this.getTaskCustomization(dependentTask);\n                const resolvedMatchers = await this.resolveProblemMatchers(dependentTask, taskCustomization);\n                await this.runTasksGraph(dependentTask, tasks, {\n                    customization: { ...taskCustomization, ...{ problemMatcher: resolvedMatchers } }\n                });\n            }\n        }\n\n        const taskInfo = await this.runTask(task, option);\n        if (taskInfo) {\n            const getExitCodePromise: Promise<TaskEndedInfo> = this.getExitCode(taskInfo.taskId).then(result => ({ taskEndedType: TaskEndedTypes.TaskExited, value: result }));\n            const isBackgroundTaskEndedPromise: Promise<TaskEndedInfo> = this.isBackgroundTaskEnded(taskInfo.taskId).then(result =>\n                ({ taskEndedType: TaskEndedTypes.BackgroundTaskEnded, value: result }));\n\n            // After start running the task, we wait for the task process to exit and if it is a background task, we also wait for a feedback\n            // that a background task is active, as soon as one of the promises fulfills, we can continue and analyze the results.\n            const taskEndedInfo: TaskEndedInfo = await Promise.race([getExitCodePromise, isBackgroundTaskEndedPromise]);\n\n            if ((taskEndedInfo.taskEndedType === TaskEndedTypes.TaskExited && taskEndedInfo.value !== 0) ||\n                (taskEndedInfo.taskEndedType === TaskEndedTypes.BackgroundTaskEnded && !taskEndedInfo.value)) {\n                throw new Error('The task: ' + task.label + ' terminated with exit code ' + taskEndedInfo.value + '.');\n            }\n        }\n        return taskInfo;\n    }\n\n    /**\n     * Creates a graph of dependencies tasks from the root task and verify there is no DAG (Directed Acyclic Graph).\n     * In case of detection of a circular dependency, an error is thrown with a message which describes the detected circular reference.\n     */\n    detectDirectedAcyclicGraph(task: TaskConfiguration, taskNode: TaskNode, tasks: TaskConfiguration[]): void {\n        if (task && task.dependsOn) {\n            // In case the 'dependsOn' is an array\n            if (Array.isArray(task.dependsOn) && task.dependsOn.length > 0) {\n                for (let i = 0; i < task.dependsOn.length; i++) {\n                    const childNode = this.createChildTaskNode(task, taskNode, task.dependsOn[i], tasks);\n                    this.detectDirectedAcyclicGraph(childNode.taskConfiguration, childNode.node, tasks);\n                }\n            } else if (!Array.isArray(task.dependsOn)) {\n                const childNode = this.createChildTaskNode(task, taskNode, task.dependsOn, tasks);\n                this.detectDirectedAcyclicGraph(childNode.taskConfiguration, childNode.node, tasks);\n            }\n        }\n    }\n\n    // 'childTaskIdentifier' may be a string (a task label) or a JSON object which represents a TaskIdentifier (e.g. {\"type\":\"npm\", \"script\":\"script1\"})\n    createChildTaskNode(task: TaskConfiguration, taskNode: TaskNode, childTaskIdentifier: string | TaskIdentifier, tasks: TaskConfiguration[]): TaskGraphNode {\n        const childTaskConfiguration = this.getDependentTask(childTaskIdentifier, tasks);\n\n        // If current task and child task are identical or if\n        // one of the child tasks is identical to one of the current task ancestors, then raise an error\n        if (this.taskDefinitionRegistry.compareTasks(task, childTaskConfiguration) ||\n            taskNode.parentsID.filter(t => this.taskDefinitionRegistry.compareTasks(childTaskConfiguration, t)).length > 0) {\n            const fromNode = task.label;\n            const toNode = childTaskConfiguration.label;\n            throw new Error('Circular reference detected: ' + fromNode + ' -->  ' + toNode);\n        }\n        const childNode = new TaskNode(childTaskConfiguration, [], Object.assign([], taskNode.parentsID));\n        childNode.addParentDependency(taskNode.taskId);\n        taskNode.addChildDependency(childNode);\n        return { 'taskConfiguration': childTaskConfiguration, 'node': childNode };\n    }\n\n    /**\n     * Gets task configuration by task label or by a JSON object which represents a task identifier\n     *\n     * @param taskIdentifier The task label (string) or a JSON object which represents a TaskIdentifier (e.g. {\"type\":\"npm\", \"script\":\"script1\"})\n     * @param tasks an array of the task configurations\n     * @returns the correct TaskConfiguration object which matches the taskIdentifier\n     */\n    getDependentTask(taskIdentifier: string | TaskIdentifier, tasks: TaskConfiguration[]): TaskConfiguration {\n        const notEnoughDataError = 'The information provided in the \"dependsOn\" is not enough for matching the correct task !';\n        let currentTaskChildConfiguration: TaskConfiguration;\n        if (typeof (taskIdentifier) !== 'string') {\n            // TaskIdentifier object does not support tasks of type 'shell' (The same behavior as in VS Code).\n            // So if we want the 'dependsOn' property to include tasks of type 'shell',\n            // then we must mention their labels (in the 'dependsOn' property) and not to create a task identifier object for them.\n            const taskDefinition = this.taskDefinitionRegistry.getDefinition(taskIdentifier);\n            if (taskDefinition) {\n                currentTaskChildConfiguration = this.getTaskByTaskIdentifierAndTaskDefinition(taskDefinition, taskIdentifier, tasks);\n                if (!currentTaskChildConfiguration.type) {\n                    this.messageService.error(notEnoughDataError);\n                    throw new Error(notEnoughDataError);\n                }\n                return currentTaskChildConfiguration;\n            } else {\n                this.messageService.error(notEnoughDataError);\n                throw new Error(notEnoughDataError);\n            }\n        } else {\n            currentTaskChildConfiguration = tasks.filter(t => taskIdentifier === this.taskNameResolver.resolve(t))[0];\n            return currentTaskChildConfiguration;\n        }\n    }\n\n    /**\n     * Gets the matched task from an array of task configurations by TaskDefinition and TaskIdentifier.\n     * In case that more than one task configuration matches, we returns the first one.\n     *\n     * @param taskDefinition The task definition for the task configuration.\n     * @param taskIdentifier The task label (string) or a JSON object which represents a TaskIdentifier (e.g. {\"type\":\"npm\", \"script\":\"script1\"})\n     * @param tasks An array of task configurations.\n     * @returns The correct TaskConfiguration object which matches the taskDefinition and taskIdentifier.\n     */\n    getTaskByTaskIdentifierAndTaskDefinition(taskDefinition: TaskDefinition | undefined, taskIdentifier: TaskIdentifier, tasks: TaskConfiguration[]): TaskConfiguration {\n        const identifierProperties: string[] = [];\n        let relevantTasks = tasks.filter(t =>\n            taskDefinition && t.hasOwnProperty('taskType') &&\n            taskDefinition['taskType'] === t['taskType'] &&\n            t.hasOwnProperty('source') &&\n            taskDefinition['source'] === t['source']);\n\n        Object.keys(taskIdentifier).forEach(key => {\n            identifierProperties.push(key);\n        });\n\n        identifierProperties.forEach(key => {\n            if (key === 'type' || key === 'taskType') {\n                relevantTasks = relevantTasks.filter(t => (t.hasOwnProperty('type') || t.hasOwnProperty('taskType')) &&\n                    ((taskIdentifier[key] === t['type']) || (taskIdentifier[key] === t['taskType'])));\n            } else {\n                relevantTasks = relevantTasks.filter(t => t.hasOwnProperty(key) && taskIdentifier[key] === t[key]);\n            }\n        });\n\n        if (relevantTasks.length > 0) {\n            return relevantTasks[0];\n        } else {\n            // return empty TaskConfiguration\n            return { 'label': '', '_scope': '', 'type': '' };\n        }\n    }\n\n    async runTask(task: TaskConfiguration, option?: RunTaskOption): Promise<TaskInfo | undefined> {\n        const runningTasksInfo: TaskInfo[] = await this.getRunningTasks();\n\n        // check if the task is active\n        const matchedRunningTaskInfo = runningTasksInfo.find(taskInfo => {\n            const taskConfig = taskInfo.config;\n            return this.taskDefinitionRegistry.compareTasks(taskConfig, task);\n        });\n        if (matchedRunningTaskInfo) { // the task is active\n            const taskName = this.taskNameResolver.resolve(task);\n            const terminalId = matchedRunningTaskInfo.terminalId;\n            if (terminalId) {\n                const terminal = this.terminalService.getById(this.getTerminalWidgetId(terminalId));\n                if (terminal && task.presentation) {\n                    if (task.presentation.focus) { // assign focus to the terminal if presentation.focus is true\n                        this.shell.activateWidget(terminal.id);\n                    } else if (task.presentation.reveal === RevealKind.Always) { // show the terminal but not assign focus\n                        this.shell.revealWidget(terminal.id);\n                    }\n                }\n            }\n            const selectedAction = await this.messageService.info(`The task '${taskName}' is already active`, 'Terminate Task', 'Restart Task');\n            if (selectedAction === 'Terminate Task') {\n                await this.terminateTask(matchedRunningTaskInfo);\n            } else if (selectedAction === 'Restart Task') {\n                return this.restartTask(matchedRunningTaskInfo, option);\n            }\n        } else { // run task as the task is not active\n            return this.doRunTask(task, option);\n        }\n    }\n\n    /**\n     * Terminates a task that is actively running.\n     * @param activeTaskInfo the TaskInfo of the task that is actively running\n     */\n    async terminateTask(activeTaskInfo: TaskInfo): Promise<void> {\n        const taskId = activeTaskInfo.taskId;\n        return this.kill(taskId);\n    }\n\n    /**\n     * Terminates a task that is actively running, and restarts it.\n     * @param activeTaskInfo the TaskInfo of the task that is actively running\n     */\n    async restartTask(activeTaskInfo: TaskInfo, option?: RunTaskOption): Promise<TaskInfo | undefined> {\n        await this.terminateTask(activeTaskInfo);\n        return this.doRunTask(activeTaskInfo.config, option);\n    }\n\n    protected async doRunTask(task: TaskConfiguration, option?: RunTaskOption): Promise<TaskInfo | undefined> {\n        if (option && option.customization) {\n            const taskDefinition = this.taskDefinitionRegistry.getDefinition(task);\n            if (taskDefinition) { // use the customization object to override the task config\n                Object.keys(option.customization).forEach(customizedProperty => {\n                    // properties used to define the task cannot be customized\n                    if (customizedProperty !== 'type' && !taskDefinition.properties.all.some(pDefinition => pDefinition === customizedProperty)) {\n                        task[customizedProperty] = option.customization![customizedProperty];\n                    }\n                });\n            }\n        }\n\n        const resolvedTask = await this.getResolvedTask(task);\n        if (resolvedTask) {\n            // remove problem markers from the same source before running the task\n            await this.removeProblemMarks(option);\n            return this.runResolvedTask(resolvedTask, option);\n        }\n    }\n\n    async runTaskByLabel(taskLabel: string): Promise<TaskInfo | undefined> {\n        const tasks: TaskConfiguration[] = await this.getTasks();\n        for (const task of tasks) {\n            if (task.label === taskLabel) {\n                return this.runTask(task);\n            }\n        }\n        return;\n    }\n\n    async runWorkspaceTask(workspaceFolderUri: string | undefined, taskIdentifier: string | TaskIdentifier): Promise<TaskInfo | undefined> {\n        const tasks = await this.getWorkspaceTasks(workspaceFolderUri);\n        const task = this.getDependentTask(taskIdentifier, tasks);\n        if (!task) {\n            return undefined;\n        }\n\n        const taskCustomization = await this.getTaskCustomization(task);\n        const resolvedMatchers = await this.resolveProblemMatchers(task, taskCustomization);\n        try {\n            const rootNode = new TaskNode(task, [], []);\n            this.detectDirectedAcyclicGraph(task, rootNode, tasks);\n        } catch (error) {\n            this.logger.error(error.message);\n            this.messageService.error(error.message);\n            return undefined;\n        }\n        return this.runTasksGraph(task, tasks, {\n            customization: { ...taskCustomization, ...{ problemMatcher: resolvedMatchers } }\n        }).catch(error => {\n            console.log(error.message);\n            return undefined;\n        });\n    }\n\n    /**\n     * Updates the task configuration in the `tasks.json`.\n     * The task config, together with updates, will be written into the `tasks.json` if it is not found in the file.\n     *\n     * @param task task that the updates will be applied to\n     * @param update the updates to be applied\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async updateTaskConfiguration(task: TaskConfiguration, update: { [name: string]: any }): Promise<void> {\n        if (update.problemMatcher) {\n            if (Array.isArray(update.problemMatcher)) {\n                update.problemMatcher.forEach((name, index) => {\n                    if (!name.startsWith('$')) {\n                        update.problemMatcher[index] = `$${update.problemMatcher[index]}`;\n                    }\n                });\n            } else if (!update.problemMatcher.startsWith('$')) {\n                update.problemMatcher = `$${update.problemMatcher}`;\n            }\n        }\n        this.taskConfigurations.updateTaskConfig(task, update);\n    }\n\n    protected async getWorkspaceTasks(workspaceFolderUri: string | undefined): Promise<TaskConfiguration[]> {\n        const tasks = await this.getTasks();\n        return tasks.filter(t => t._scope === workspaceFolderUri || t._scope === undefined);\n    }\n\n    protected async resolveProblemMatchers(task: TaskConfiguration, customizationObject: TaskCustomization): Promise<ProblemMatcher[] | undefined> {\n        const notResolvedMatchers = customizationObject.problemMatcher ?\n            (Array.isArray(customizationObject.problemMatcher) ? customizationObject.problemMatcher : [customizationObject.problemMatcher]) : undefined;\n        let resolvedMatchers: ProblemMatcher[] | undefined = [];\n        if (notResolvedMatchers) {\n            // resolve matchers before passing them to the server\n            for (const matcher of notResolvedMatchers) {\n                let resolvedMatcher: ProblemMatcher | undefined;\n                await this.problemMatcherRegistry.onReady();\n                if (typeof matcher === 'string') {\n                    resolvedMatcher = this.problemMatcherRegistry.get(matcher);\n                } else {\n                    resolvedMatcher = await this.problemMatcherRegistry.getProblemMatcherFromContribution(matcher);\n                }\n                if (resolvedMatcher) {\n                    const scope = task._scope || task._source;\n                    if (resolvedMatcher.filePrefix && scope) {\n                        const options = {\n                            context: new URI(scope).withScheme('file'),\n                            configurationSection: 'tasks'\n                        };\n                        const resolvedPrefix = await this.variableResolverService.resolve(resolvedMatcher.filePrefix, options);\n                        Object.assign(resolvedMatcher, { filePrefix: resolvedPrefix });\n                    }\n                    resolvedMatchers.push(resolvedMatcher);\n                }\n            }\n        } else {\n            resolvedMatchers = undefined;\n        }\n        return resolvedMatchers;\n    }\n\n    protected async getTaskCustomization(task: TaskConfiguration): Promise<TaskCustomization> {\n        const customizationObject: TaskCustomization = { type: '' };\n        const customizationFound = this.taskConfigurations.getCustomizationForTask(task);\n        if (customizationFound) {\n            Object.assign(customizationObject, customizationFound);\n        } else {\n            Object.assign(customizationObject, {\n                type: task.type,\n                problemMatcher: task.problemMatcher\n            });\n        }\n        return customizationObject;\n    }\n\n    private async removeProblemMarks(option?: RunTaskOption): Promise<void> {\n        if (option && option.customization) {\n            const matchersFromOption = option.customization.problemMatcher || [];\n            for (const matcher of matchersFromOption) {\n                if (matcher && matcher.owner) {\n                    const existingMarkers = this.problemManager.findMarkers({ owner: matcher.owner });\n                    const uris = new Set<string>();\n                    existingMarkers.forEach(marker => uris.add(marker.uri));\n                    uris.forEach(uriString => this.problemManager.setMarkers(new URI(uriString), matcher.owner, []));\n                }\n            }\n        }\n    }\n\n    private async getResolvedTask(task: TaskConfiguration): Promise<TaskConfiguration | undefined> {\n        let resolver = undefined;\n        let resolvedTask: TaskConfiguration;\n        try {\n            resolver = await this.taskResolverRegistry.getResolver(task.type);\n            resolvedTask = resolver ? await resolver.resolveTask(task) : task;\n        } catch (error) {\n            const errMessage = `Error resolving task '${task.label}': ${error}`;\n            this.logger.error(errMessage);\n            resolvedTask = task;\n        }\n        this.addRecentTasks(task);\n        return resolvedTask;\n    }\n\n    /**\n     * Runs the resolved task and opens terminal widget if the task is based on a terminal process\n     * @param resolvedTask the resolved task\n     * @param option options to run the resolved task\n     */\n    private async runResolvedTask(resolvedTask: TaskConfiguration, option?: RunTaskOption): Promise<TaskInfo | undefined> {\n        const source = resolvedTask._source;\n        const taskLabel = resolvedTask.label;\n        try {\n            const taskInfo = await this.taskServer.run(resolvedTask, this.getContext(), option);\n            this.lastTask = { source, taskLabel };\n            this.logger.debug(`Task created. Task id: ${taskInfo.taskId}`);\n\n            /**\n             * open terminal widget if the task is based on a terminal process (type: 'shell' or 'process')\n             *\n             * @todo Use a different mechanism to determine if the task should be attached?\n             *       Reason: Maybe a new task type wants to also be displayed in a terminal.\n             */\n            if (typeof taskInfo.terminalId === 'number') {\n                this.attach(taskInfo.terminalId, taskInfo.taskId);\n            }\n            return taskInfo;\n        } catch (error) {\n            const errorStr = `Error launching task '${taskLabel}': ${error.message}`;\n            this.logger.error(errorStr);\n            this.messageService.error(errorStr);\n        }\n    }\n\n    private getCustomizeProblemMatcherItems(): QuickPickItem<QuickPickProblemMatcherItem>[] {\n        const items: QuickPickItem<QuickPickProblemMatcherItem>[] = [];\n        items.push({\n            label: 'Continue without scanning the task output',\n            value: { problemMatchers: undefined }\n        });\n        items.push({\n            label: 'Never scan the task output',\n            value: { problemMatchers: [] }\n        });\n        items.push({\n            label: 'Learn more about scanning the task output',\n            value: { problemMatchers: undefined, learnMore: true }\n        });\n        items.push({ type: 'separator', label: 'registered parsers' });\n\n        const registeredProblemMatchers = this.problemMatcherRegistry.getAll();\n        items.push(...registeredProblemMatchers.map(matcher =>\n            ({\n                label: matcher.label,\n                value: { problemMatchers: [matcher] },\n                description: matcher.name.startsWith('$') ? matcher.name : `$${matcher.name}`\n            })\n        ));\n        return items;\n    }\n\n    /**\n     * Run selected text in the last active terminal.\n     */\n    async runSelectedText(): Promise<void> {\n        if (!this.editorManager.currentEditor) { return; }\n        const startLine = this.editorManager.currentEditor.editor.selection.start.line;\n        const startCharacter = this.editorManager.currentEditor.editor.selection.start.character;\n        const endLine = this.editorManager.currentEditor.editor.selection.end.line;\n        const endCharacter = this.editorManager.currentEditor.editor.selection.end.character;\n        let selectedRange: Range = Range.create(startLine, startCharacter, endLine, endCharacter);\n        // if no text is selected, default to selecting entire line\n        if (startLine === endLine && startCharacter === endCharacter) {\n            selectedRange = Range.create(startLine, 0, endLine + 1, 0);\n        }\n        const selectedText: string = this.editorManager.currentEditor.editor.document.getText(selectedRange).trimRight() + '\\n';\n        let terminal = this.terminalService.currentTerminal;\n        if (!terminal) {\n            terminal = <TerminalWidget>await this.terminalService.newTerminal(<TerminalWidgetFactoryOptions>{ created: new Date().toString() });\n            await terminal.start();\n            this.terminalService.activateTerminal(terminal);\n        }\n        terminal.sendText(selectedText);\n    }\n\n    async attach(processId: number, taskId: number): Promise<void> {\n        // Get the list of all available running tasks.\n        const runningTasks: TaskInfo[] = await this.getRunningTasks();\n        // Get the corresponding task information based on task id if available.\n        const taskInfo: TaskInfo | undefined = runningTasks.find((t: TaskInfo) => t.taskId === taskId);\n        // Create terminal widget to display an execution output of a task that was launched as a command inside a shell.\n        const widget = <TerminalWidget>await this.widgetManager.getOrCreateWidget(\n            TERMINAL_WIDGET_FACTORY_ID,\n            <TerminalWidgetFactoryOptions>{\n                created: new Date().toString(),\n                id: this.getTerminalWidgetId(processId),\n                title: taskInfo\n                    ? `Task: ${taskInfo.config.label}`\n                    : `Task: #${taskId}`,\n                destroyTermOnClose: true\n            }\n        );\n        this.shell.addWidget(widget, { area: 'bottom' });\n        if (taskInfo && taskInfo.config.presentation && taskInfo.config.presentation.reveal === RevealKind.Always) {\n            if (taskInfo.config.presentation.focus) { // assign focus to the terminal if presentation.focus is true\n                this.shell.activateWidget(widget.id);\n            } else { // show the terminal but not assign focus\n                this.shell.revealWidget(widget.id);\n            }\n        }\n        widget.start(processId);\n    }\n\n    private getTerminalWidgetId(terminalId: number): string {\n        return `${TERMINAL_WIDGET_FACTORY_ID}-${terminalId}`;\n    }\n\n    async configure(task: TaskConfiguration): Promise<void> {\n        await this.taskConfigurations.configure(task);\n    }\n\n    protected isEventForThisClient(context: string | undefined): boolean {\n        if (context === this.getContext()) {\n            return true;\n        }\n        return false;\n    }\n\n    taskConfigurationChanged(event: string[]): void {\n        // do nothing for now\n    }\n\n    protected getContext(): string | undefined {\n        return this.workspaceService.workspace && this.workspaceService.workspace.uri;\n    }\n\n    /** Kill task for a given id if task is found */\n    async kill(id: number): Promise<void> {\n        try {\n            await this.taskServer.kill(id);\n        } catch (error) {\n            this.logger.error(`Error killing task '${id}': ${error}`);\n            this.messageService.error(`Error killing task '${id}': ${error}`);\n            return;\n        }\n        this.logger.debug(`Task killed. Task id: ${id}`);\n    }\n\n    async isBackgroundTaskEnded(id: number): Promise<boolean | undefined> {\n        const completedTask = this.runningTasks.get(id);\n        return completedTask && completedTask.isBackgroundTaskEnded!.promise;\n    }\n\n    async getExitCode(id: number): Promise<number | undefined> {\n        const completedTask = this.runningTasks.get(id);\n        return completedTask && completedTask.exitCode.promise;\n    }\n\n    async getTerminateSignal(id: number): Promise<string | undefined> {\n        const completedTask = this.runningTasks.get(id);\n        return completedTask && completedTask.terminateSignal.promise;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { TaskConfiguration, ContributedTaskConfiguration } from '../common';\nimport { TaskDefinitionRegistry } from './task-definition-registry';\n\n@injectable()\nexport class TaskSourceResolver {\n    @inject(TaskDefinitionRegistry)\n    protected taskDefinitionRegistry: TaskDefinitionRegistry;\n\n    /**\n     * Returns task source to display.\n     */\n    resolve(task: TaskConfiguration): string | undefined {\n        const isDetectedTask = this.isDetectedTask(task);\n        let sourceFolderUri: string | undefined;\n        if (isDetectedTask) {\n            sourceFolderUri = task._scope;\n        } else {\n            sourceFolderUri = task._source;\n        }\n        return sourceFolderUri;\n    }\n\n    private isDetectedTask(task: TaskConfiguration): task is ContributedTaskConfiguration {\n        return !!this.taskDefinitionRegistry.getDefinition(task);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { injectable } from 'inversify';\nimport { QuickPickItem } from '@theia/core/lib/common/quick-pick-service';\n\n/** The representation of a task template used in the auto-generation of `tasks.json` */\nexport interface TaskTemplateEntry {\n    id: string;\n    label: string;\n    description: string;\n    sort?: string; // string used in the sorting. If `undefined` the label is used in sorting.\n    autoDetect: boolean; // not supported in Theia\n    content: string;\n}\n\nconst dotnetBuild: TaskTemplateEntry = {\n    id: 'dotnetCore',\n    label: '.NET Core',\n    sort: 'NET Core',\n    autoDetect: false, // not supported in Theia\n    description: 'Executes .NET Core build command',\n    content: [\n        '{',\n        '\\t// See https://go.microsoft.com/fwlink/?LinkId=733558',\n        '\\t// for the documentation about the tasks.json format',\n        '\\t\"version\": \"2.0.0\",',\n        '\\t\"tasks\": [',\n        '\\t\\t{',\n        '\\t\\t\\t\"label\": \"build\",',\n        '\\t\\t\\t\"command\": \"dotnet\",',\n        '\\t\\t\\t\"type\": \"shell\",',\n        '\\t\\t\\t\"args\": [',\n        '\\t\\t\\t\\t\"build\",',\n        '\\t\\t\\t\\t// Ask dotnet build to generate full paths for file names.',\n        '\\t\\t\\t\\t\"/property:GenerateFullPaths=true\",',\n        '\\t\\t\\t\\t// Do not generate summary otherwise it leads to duplicate errors in Problems panel',\n        '\\t\\t\\t\\t\"/consoleloggerparameters:NoSummary\"',\n        '\\t\\t\\t],',\n        '\\t\\t\\t\"group\": \"build\",',\n        '\\t\\t\\t\"presentation\": {',\n        '\\t\\t\\t\\t\"reveal\": \"silent\"',\n        '\\t\\t\\t},',\n        '\\t\\t\\t\"problemMatcher\": \"$msCompile\"',\n        '\\t\\t}',\n        '\\t]',\n        '}'\n    ].join('\\n')\n};\n\nconst msbuild: TaskTemplateEntry = {\n    id: 'msbuild',\n    label: 'MSBuild',\n    autoDetect: false, // not supported in Theia\n    description: 'Executes the build target',\n    content: [\n        '{',\n        '\\t// See https://go.microsoft.com/fwlink/?LinkId=733558',\n        '\\t// for the documentation about the tasks.json format',\n        '\\t\"version\": \"2.0.0\",',\n        '\\t\"tasks\": [',\n        '\\t\\t{',\n        '\\t\\t\\t\"label\": \"build\",',\n        '\\t\\t\\t\"type\": \"shell\",',\n        '\\t\\t\\t\"command\": \"msbuild\",',\n        '\\t\\t\\t\"args\": [',\n        '\\t\\t\\t\\t// Ask msbuild to generate full paths for file names.',\n        '\\t\\t\\t\\t\"/property:GenerateFullPaths=true\",',\n        '\\t\\t\\t\\t\"/t:build\",',\n        '\\t\\t\\t\\t// Do not generate summary otherwise it leads to duplicate errors in Problems panel',\n        '\\t\\t\\t\\t\"/consoleloggerparameters:NoSummary\"',\n        '\\t\\t\\t],',\n        '\\t\\t\\t\"group\": \"build\",',\n        '\\t\\t\\t\"presentation\": {',\n        '\\t\\t\\t\\t// Reveal the output only if unrecognized errors occur.',\n        '\\t\\t\\t\\t\"reveal\": \"silent\"',\n        '\\t\\t\\t},',\n        '\\t\\t\\t// Use the standard MS compiler pattern to detect errors, warnings and infos',\n        '\\t\\t\\t\"problemMatcher\": \"$msCompile\"',\n        '\\t\\t}',\n        '\\t]',\n        '}'\n    ].join('\\n')\n};\n\nconst maven: TaskTemplateEntry = {\n    id: 'maven',\n    label: 'maven',\n    sort: 'MVN',\n    autoDetect: false, // not supported in Theia\n    description: 'Executes common maven commands',\n    content: [\n        '{',\n        '\\t// See https://go.microsoft.com/fwlink/?LinkId=733558',\n        '\\t// for the documentation about the tasks.json format',\n        '\\t\"version\": \"2.0.0\",',\n        '\\t\"tasks\": [',\n        '\\t\\t{',\n        '\\t\\t\\t\"label\": \"verify\",',\n        '\\t\\t\\t\"type\": \"shell\",',\n        '\\t\\t\\t\"command\": \"mvn -B verify\",',\n        '\\t\\t\\t\"group\": \"build\"',\n        '\\t\\t},',\n        '\\t\\t{',\n        '\\t\\t\\t\"label\": \"test\",',\n        '\\t\\t\\t\"type\": \"shell\",',\n        '\\t\\t\\t\"command\": \"mvn -B test\",',\n        '\\t\\t\\t\"group\": \"test\"',\n        '\\t\\t}',\n        '\\t]',\n        '}'\n    ].join('\\n')\n};\n\nconst command: TaskTemplateEntry = {\n    id: 'externalCommand',\n    label: 'Others',\n    autoDetect: false, // not supported in Theia\n    description: 'Example to run an arbitrary external command',\n    content: [\n        '{',\n        '\\t// See https://go.microsoft.com/fwlink/?LinkId=733558',\n        '\\t// for the documentation about the tasks.json format',\n        '\\t\"version\": \"2.0.0\",',\n        '\\t\"tasks\": [',\n        '\\t\\t{',\n        '\\t\\t\\t\"label\": \"echo\",',\n        '\\t\\t\\t\"type\": \"shell\",',\n        '\\t\\t\\t\"command\": \"echo Hello\"',\n        '\\t\\t}',\n        '\\t]',\n        '}'\n    ].join('\\n')\n};\n\n@injectable()\nexport class TaskTemplateSelector {\n    selectTemplates(): QuickPickItem<TaskTemplateEntry>[] {\n        const templates: TaskTemplateEntry[] = [\n            dotnetBuild, msbuild, maven\n        ].sort((a, b) =>\n            (a.sort || a.label).localeCompare(b.sort || b.label)\n        );\n        templates.push(command);\n        return templates.map(t => ({\n            label: t.label,\n            description: t.description,\n            value: t\n        }));\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './task-protocol';\nexport * from './task-watcher';\nexport * from './problem-matcher-protocol';\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n// This file is inspired by VSCode https://github.com/Microsoft/vscode/blob/1.33.1/src/vs/workbench/contrib/tasks/common/problemMatcher.ts\n// 'problemMatcher.ts' copyright:\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Severity } from '@theia/core/lib/common/severity';\nimport { Diagnostic } from 'vscode-languageserver-types';\nimport vscodeURI from 'vscode-uri/lib/umd';\nimport { ProblemPatternContribution, WatchingMatcherContribution } from './task-protocol';\n\nexport enum ApplyToKind {\n    allDocuments,\n    openDocuments,\n    closedDocuments\n}\n\nexport namespace ApplyToKind {\n    export function fromString(value: string | undefined): ApplyToKind | undefined {\n        if (value) {\n            value = value.toLowerCase();\n            if (value === 'alldocuments') {\n                return ApplyToKind.allDocuments;\n            } else if (value === 'opendocuments') {\n                return ApplyToKind.openDocuments;\n            } else if (value === 'closeddocuments') {\n                return ApplyToKind.closedDocuments;\n            }\n        }\n        return undefined;\n    }\n}\n\nexport enum FileLocationKind {\n    Auto,\n    Relative,\n    Absolute\n}\n\nexport namespace FileLocationKind {\n    export function fromString(value: string): FileLocationKind | undefined {\n        value = value.toLowerCase();\n        if (value === 'absolute') {\n            return FileLocationKind.Absolute;\n        } else if (value === 'relative') {\n            return FileLocationKind.Relative;\n        } else {\n            return undefined;\n        }\n    }\n}\n\nexport interface WatchingPattern {\n    regexp: string;\n    file?: number;\n}\n\nexport interface WatchingMatcher {\n    // If set to true the background monitor is in active mode when the task starts.\n    // This is equals of issuing a line that matches the beginPattern\n    activeOnStart: boolean;\n    beginsPattern: WatchingPattern;\n    endsPattern: WatchingPattern;\n}\nexport namespace WatchingMatcher {\n    export function fromWatchingMatcherContribution(value: WatchingMatcherContribution | undefined): WatchingMatcher | undefined {\n        if (!value) {\n            return undefined;\n        }\n        return {\n            activeOnStart: !!value.activeOnStart,\n            beginsPattern: typeof value.beginsPattern === 'string' ? { regexp: value.beginsPattern } : value.beginsPattern,\n            endsPattern: typeof value.endsPattern === 'string' ? { regexp: value.endsPattern } : value.endsPattern\n        };\n    }\n}\n\nexport enum ProblemLocationKind {\n    File,\n    Location\n}\n\nexport namespace ProblemLocationKind {\n    export function fromString(value: string): ProblemLocationKind | undefined {\n        value = value.toLowerCase();\n        if (value === 'file') {\n            return ProblemLocationKind.File;\n        } else if (value === 'location') {\n            return ProblemLocationKind.Location;\n        } else {\n            return undefined;\n        }\n    }\n}\n\nexport interface ProblemMatcher {\n    deprecated?: boolean;\n\n    owner: string;\n    source?: string;\n    applyTo: ApplyToKind;\n    fileLocation: FileLocationKind;\n    filePrefix?: string;\n    pattern: ProblemPattern | ProblemPattern[];\n    severity?: Severity;\n    watching?: WatchingMatcher;\n    uriProvider?: (path: string) => vscodeURI;\n}\n\nexport interface NamedProblemMatcher extends ProblemMatcher {\n    name: string;\n    label: string;\n}\n\nexport namespace ProblemMatcher {\n    export function isWatchModeWatcher(matcher: ProblemMatcher): boolean {\n        return !!matcher.watching;\n    }\n}\n\nexport interface ProblemPattern {\n    name?: string;\n\n    regexp: string;\n\n    kind?: ProblemLocationKind;\n    file?: number;\n    message?: number;\n    location?: number;\n    line?: number;\n    character?: number;\n    endLine?: number;\n    endCharacter?: number;\n    code?: number;\n    severity?: number;\n    loop?: boolean;\n}\n\nexport interface NamedProblemPattern extends ProblemPattern {\n    name: string;\n}\n\nexport namespace ProblemPattern {\n    export function fromProblemPatternContribution(value: ProblemPatternContribution): ProblemPattern {\n        return {\n            name: value.name,\n            regexp: value.regexp,\n            kind: value.kind ? ProblemLocationKind.fromString(value.kind) : undefined,\n            file: value.file,\n            message: value.message,\n            location: value.location,\n            line: value.line,\n            character: value.column || value.character,\n            endLine: value.endLine,\n            endCharacter: value.endColumn || value.endCharacter,\n            code: value.code,\n            severity: value.severity,\n            loop: value.loop\n        };\n    }\n}\n\nexport interface ProblemMatch {\n    resource?: vscodeURI;\n    description: ProblemMatcher;\n}\n\nexport interface ProblemMatchData extends ProblemMatch {\n    marker: Diagnostic;\n}\nexport namespace ProblemMatchData {\n    export function is(data: ProblemMatch): data is ProblemMatchData {\n        return 'marker' in data;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { JsonRpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { IJSONSchema } from '@theia/core/lib/common/json-schema';\nimport { ProblemMatcher, ProblemMatch, WatchingPattern } from './problem-matcher-protocol';\n\nexport const taskPath = '/services/task';\n\nexport const TaskServer = Symbol('TaskServer');\nexport const TaskClient = Symbol('TaskClient');\nexport enum DependsOrder {\n    Sequence = 'sequence',\n    Parallel = 'parallel',\n}\n\nexport enum RevealKind {\n    Always,\n    Silent,\n    Never\n}\n\nexport interface TaskOutputPresentation {\n    focus?: boolean;\n    reveal?: RevealKind;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [name: string]: any;\n}\nexport namespace TaskOutputPresentation {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    export function fromJson(task: any): TaskOutputPresentation {\n        if (task && task.presentation) {\n            let reveal = RevealKind.Always;\n            if (task.presentation.reveal === 'silent') {\n                reveal = RevealKind.Silent;\n            } else if (task.presentation.reveal === 'never') {\n                reveal = RevealKind.Never;\n            }\n            return {\n                reveal,\n                focus: !!task.presentation.focus\n            };\n        }\n        return {\n            reveal: RevealKind.Always,\n            focus: false\n        };\n    }\n}\n\nexport interface TaskCustomization {\n    type: string;\n    group?: 'build' | 'test' | 'none' | { kind: 'build' | 'test' | 'none', isDefault: true };\n    problemMatcher?: string | ProblemMatcherContribution | (string | ProblemMatcherContribution)[];\n    presentation?: TaskOutputPresentation;\n\n    /** Whether the task is a background task or not. */\n    isBackground?: boolean;\n\n    /** The other tasks the task depend on. */\n    dependsOn?: string | TaskIdentifier | Array<string | TaskIdentifier>;\n\n    /** The order the dependsOn tasks should be executed in. */\n    dependsOrder?: DependsOrder;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [name: string]: any;\n}\nexport namespace TaskCustomization {\n    export function isBuildTask(task: TaskCustomization): boolean {\n        return task.group === 'build' || !!task.group && typeof task.group === 'object' && task.group.kind === 'build';\n    }\n\n    export function isDefaultBuildTask(task: TaskCustomization): boolean {\n        return !!task.group && typeof task.group === 'object' && task.group.kind === 'build' && task.group.isDefault;\n    }\n\n    export function isTestTask(task: TaskCustomization): boolean {\n        return task.group === 'test' || !!task.group && typeof task.group === 'object' && task.group.kind === 'test';\n    }\n\n    export function isDefaultTestTask(task: TaskCustomization): boolean {\n        return !!task.group && typeof task.group === 'object' && task.group.kind === 'test' && task.group.isDefault;\n    }\n}\n\nexport interface TaskConfiguration extends TaskCustomization {\n    /** A label that uniquely identifies a task configuration per source */\n    readonly label: string;\n    /**\n     * For a provided task, it is the string representation of the URI where the task is supposed to run from. It is `undefined` for global tasks.\n     * For a configured task, it is workspace URI that task belongs to.\n     * This field is not supposed to be used in `tasks.json`\n     */\n    readonly _scope: string | undefined;\n}\n\nexport interface ContributedTaskConfiguration extends TaskConfiguration {\n    /**\n     * Source of the task configuration.\n     * For a configured task, it is the name of the root folder, while for a provided task, it is the name of the provider.\n     * This field is not supposed to be used in `tasks.json`\n     */\n    readonly _source: string;\n}\n\n/** A task identifier */\nexport interface TaskIdentifier {\n    type: string;\n    [name: string]: string;\n}\n\n/** Runtime information about Task. */\nexport interface TaskInfo {\n    /** internal unique task id */\n    readonly taskId: number,\n    /** terminal id. Defined if task is run as a terminal process */\n    readonly terminalId?: number,\n    /** context that was passed as part of task creation, if any */\n    readonly ctx?: string,\n    /** task config used for launching a task */\n    readonly config: TaskConfiguration,\n    /** Additional properties specific for a particular Task Runner. */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    readonly [key: string]: any;\n}\n\nexport interface TaskServer extends JsonRpcServer<TaskClient> {\n    /** Run a task. Optionally pass a context.  */\n    run(task: TaskConfiguration, ctx?: string, option?: RunTaskOption): Promise<TaskInfo>;\n    /** Kill a task, by id. */\n    kill(taskId: number): Promise<void>;\n    /**\n     * Returns a list of currently running tasks. If a context is provided,\n     * only the tasks started in that context will be provided. Using an\n     * undefined context matches all tasks, no matter the creation context.\n     */\n    getTasks(ctx?: string): Promise<TaskInfo[]>\n\n    /** removes the client that has disconnected */\n    disconnectClient(client: TaskClient): void;\n\n    /** Returns the list of default and registered task runners */\n    getRegisteredTaskTypes(): Promise<string[]>\n\n}\n\nexport interface TaskCustomizationData {\n    type: string;\n    problemMatcher?: ProblemMatcher[];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [name: string]: any;\n}\n\nexport interface RunTaskOption {\n    customization?: TaskCustomizationData;\n}\n\n/** Event sent when a task has concluded its execution */\nexport interface TaskExitedEvent {\n    readonly taskId: number;\n    readonly ctx?: string;\n\n    // Exactly one of code and signal will be set.\n    readonly code?: number;\n    readonly signal?: string;\n\n    readonly config?: TaskConfiguration;\n\n    readonly terminalId?: number;\n    readonly processId?: number;\n}\n\nexport interface TaskOutputEvent {\n    readonly taskId: number;\n    readonly ctx?: string;\n    readonly line: string;\n}\n\nexport interface TaskOutputProcessedEvent {\n    readonly taskId: number;\n    readonly config: TaskConfiguration;\n    readonly ctx?: string;\n    readonly problems?: ProblemMatch[];\n}\n\nexport interface BackgroundTaskEndedEvent {\n    readonly taskId: number;\n    readonly ctx?: string;\n}\n\nexport interface TaskClient {\n    onTaskExit(event: TaskExitedEvent): void;\n    onTaskCreated(event: TaskInfo): void;\n    onDidStartTaskProcess(event: TaskInfo): void;\n    onDidEndTaskProcess(event: TaskExitedEvent): void;\n    onDidProcessTaskOutput(event: TaskOutputProcessedEvent): void;\n    onBackgroundTaskEnded(event: BackgroundTaskEndedEvent): void;\n}\n\nexport interface TaskDefinition {\n    taskType: string;\n    source: string;\n    properties: {\n        required: string[];\n        all: string[];\n        schema: IJSONSchema;\n    }\n}\n\nexport interface WatchingMatcherContribution {\n    // If set to true the background monitor is in active mode when the task starts.\n    // This is equals of issuing a line that matches the beginPattern\n    activeOnStart?: boolean;\n    beginsPattern: string | WatchingPattern;\n    endsPattern: string | WatchingPattern;\n}\n\nexport interface ProblemMatcherContribution {\n    name?: string;\n    label: string;\n    deprecated?: boolean;\n\n    owner: string;\n    source?: string;\n    applyTo?: string;\n    fileLocation?: 'absolute' | 'relative' | string[];\n    pattern: string | ProblemPatternContribution | ProblemPatternContribution[];\n    severity?: string;\n    watching?: WatchingMatcherContribution; // deprecated. Use `background`.\n    background?: WatchingMatcherContribution;\n}\n\nexport interface ProblemPatternContribution {\n    name?: string;\n    regexp: string;\n\n    kind?: string;\n    file?: number;\n    message?: number;\n    location?: number;\n    line?: number;\n    character?: number;\n    column?: number;\n    endLine?: number;\n    endCharacter?: number;\n    endColumn?: number;\n    code?: number;\n    severity?: number;\n    loop?: boolean;\n}\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport { Emitter, Event } from '@theia/core/lib/common/event';\nimport { TaskClient, TaskExitedEvent, TaskInfo, TaskOutputProcessedEvent, BackgroundTaskEndedEvent } from './task-protocol';\n\n@injectable()\nexport class TaskWatcher {\n\n    getTaskClient(): TaskClient {\n        const newTaskEmitter = this.onTaskCreatedEmitter;\n        const exitEmitter = this.onTaskExitEmitter;\n        const taskProcessStartedEmitter = this.onDidStartTaskProcessEmitter;\n        const taskProcessEndedEmitter = this.onDidEndTaskProcessEmitter;\n        const outputProcessedEmitter = this.onOutputProcessedEmitter;\n        const backgroundTaskEndedEmitter = this.onBackgroundTaskEndedEmitter;\n        return {\n            onTaskCreated(event: TaskInfo): void {\n                newTaskEmitter.fire(event);\n            },\n            onTaskExit(event: TaskExitedEvent): void {\n                exitEmitter.fire(event);\n            },\n            onDidStartTaskProcess(event: TaskInfo): void {\n                taskProcessStartedEmitter.fire(event);\n            },\n            onDidEndTaskProcess(event: TaskExitedEvent): void {\n                taskProcessEndedEmitter.fire(event);\n            },\n            onDidProcessTaskOutput(event: TaskOutputProcessedEvent): void {\n                outputProcessedEmitter.fire(event);\n            },\n            onBackgroundTaskEnded(event: BackgroundTaskEndedEvent): void {\n                backgroundTaskEndedEmitter.fire(event);\n            }\n        };\n    }\n\n    protected onTaskCreatedEmitter = new Emitter<TaskInfo>();\n    protected onTaskExitEmitter = new Emitter<TaskExitedEvent>();\n    protected onDidStartTaskProcessEmitter = new Emitter<TaskInfo>();\n    protected onDidEndTaskProcessEmitter = new Emitter<TaskExitedEvent>();\n    protected onOutputProcessedEmitter = new Emitter<TaskOutputProcessedEvent>();\n    protected onBackgroundTaskEndedEmitter = new Emitter<BackgroundTaskEndedEvent>();\n\n    get onTaskCreated(): Event<TaskInfo> {\n        return this.onTaskCreatedEmitter.event;\n    }\n    get onTaskExit(): Event<TaskExitedEvent> {\n        return this.onTaskExitEmitter.event;\n    }\n    get onDidStartTaskProcess(): Event<TaskInfo> {\n        return this.onDidStartTaskProcessEmitter.event;\n    }\n    get onDidEndTaskProcess(): Event<TaskExitedEvent> {\n        return this.onDidEndTaskProcessEmitter.event;\n    }\n    get onOutputProcessed(): Event<TaskOutputProcessedEvent> {\n        return this.onOutputProcessedEmitter.event;\n    }\n    get onBackgroundTaskEnded(): Event<BackgroundTaskEndedEvent> {\n        return this.onBackgroundTaskEndedEmitter.event;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*\n * copied from\n * https://github.com/microsoft/vscode/blob/0a34756cae4fc67739e60c708b04637089f8bb0d/src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts#L23\n */\n\nconst idDescription = \"The input's id is used to associate an input with a variable of the form ${input:id}.\";\nconst typeDescription = 'The type of user input prompt to use.';\nconst descriptionDescription = 'The description is shown when the user is prompted for input.';\nconst defaultDescription = 'The default value for the input.';\n\nimport { IJSONSchema } from '@theia/core/lib/common/json-schema';\n\nexport const inputsSchema: IJSONSchema = {\n    definitions: {\n        inputs: {\n            type: 'array',\n            description: 'User inputs. Used for defining user input prompts, such as free string input or a choice from several options.',\n            items: {\n                oneOf: [\n                    {\n                        type: 'object',\n                        required: ['id', 'type', 'description'],\n                        additionalProperties: false,\n                        properties: {\n                            id: {\n                                type: 'string',\n                                description: idDescription\n                            },\n                            type: {\n                                type: 'string',\n                                description: typeDescription,\n                                enum: ['promptString'],\n                                enumDescriptions: [\n                                    \"The 'promptString' type opens an input box to ask the user for input.\"\n                                ]\n                            },\n                            description: {\n                                type: 'string',\n                                description: descriptionDescription\n                            },\n                            default: {\n                                type: 'string',\n                                description: defaultDescription\n                            },\n                        }\n                    },\n                    {\n                        type: 'object',\n                        required: ['id', 'type', 'description', 'options'],\n                        additionalProperties: false,\n                        properties: {\n                            id: {\n                                type: 'string',\n                                description: idDescription\n                            },\n                            type: {\n                                type: 'string',\n                                description: typeDescription,\n                                enum: ['pickString'],\n                                enumDescriptions: [\n                                    \"The 'pickString' type shows a selection list.\",\n                                ]\n                            },\n                            description: {\n                                type: 'string',\n                                description: descriptionDescription\n                            },\n                            default: {\n                                type: 'string',\n                                description: defaultDescription\n                            },\n                            options: {\n                                type: 'array',\n                                description: 'An array of strings that defines the options for a quick pick.',\n                                items: {\n                                    type: 'string'\n                                }\n                            }\n                        }\n                    },\n                    {\n                        type: 'object',\n                        required: ['id', 'type', 'command'],\n                        additionalProperties: false,\n                        properties: {\n                            id: {\n                                type: 'string',\n                                description: idDescription\n                            },\n                            type: {\n                                type: 'string',\n                                description: typeDescription,\n                                enum: ['command'],\n                                enumDescriptions: [\n                                    \"The 'command' type executes a command.\",\n                                ]\n                            },\n                            command: {\n                                type: 'string',\n                                description: 'The command to execute for this input variable.'\n                            },\n                            args: {\n                                type: 'object',\n                                description: 'Optional arguments passed to the command.'\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n};\n"],"sourceRoot":""}