{"version":3,"sources":["webpack:///./node_modules/@theia/preferences/src/browser/abstract-resource-preference-provider.ts","webpack:///./node_modules/@theia/preferences/src/browser/folder-preference-provider.ts","webpack:///./node_modules/@theia/preferences/src/browser/folders-preferences-provider.ts","webpack:///./node_modules/@theia/preferences/src/browser/user-preference-provider.ts","webpack:///./node_modules/@theia/preferences/src/browser/workspace-file-preference-provider.ts","webpack:///./node_modules/@theia/preferences/src/browser/workspace-preference-provider.ts","webpack:///./node_modules/@theia/userstorage/src/browser/index.ts"],"names":[],"mappings":"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","file":"30.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-null/no-null */\n\nimport * as jsoncparser from 'jsonc-parser';\nimport { JSONExt } from '@phosphor/coreutils/lib/json';\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { PreferenceProvider, PreferenceSchemaProvider, PreferenceScope, PreferenceProviderDataChange, PreferenceService } from '@theia/core/lib/browser';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { MonacoTextModelService } from '@theia/monaco/lib/browser/monaco-text-model-service';\nimport { MonacoEditorModel } from '@theia/monaco/lib/browser/monaco-editor-model';\nimport { MonacoWorkspace } from '@theia/monaco/lib/browser/monaco-workspace';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\n\n@injectable()\nexport abstract class AbstractResourcePreferenceProvider extends PreferenceProvider {\n\n    protected preferences: { [key: string]: any } = {};\n    protected model: MonacoEditorModel | undefined;\n    protected readonly loading = new Deferred();\n\n    @inject(PreferenceService) protected readonly preferenceService: PreferenceService;\n    @inject(MessageService) protected readonly messageService: MessageService;\n    @inject(PreferenceSchemaProvider) protected readonly schemaProvider: PreferenceSchemaProvider;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    @inject(MonacoTextModelService)\n    protected readonly textModelService: MonacoTextModelService;\n\n    @inject(MonacoWorkspace)\n    protected readonly workspace: MonacoWorkspace;\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        const uri = this.getUri();\n        this.toDispose.push(Disposable.create(() => this.loading.reject(new Error(`preference provider for '${uri}' was disposed`))));\n        this._ready.resolve();\n\n        const reference = await this.textModelService.createModelReference(uri);\n        if (this.toDispose.disposed) {\n            reference.dispose();\n            return;\n        }\n\n        this.model = reference.object;\n        this.loading.resolve();\n\n        this.toDispose.push(reference);\n        this.toDispose.push(Disposable.create(() => this.model = undefined));\n\n        this.readPreferences();\n        this.toDispose.push(this.model.onDidChangeContent(() => this.readPreferences()));\n        this.toDispose.push(this.model.onDirtyChanged(() => this.readPreferences()));\n        this.toDispose.push(this.model.onDidChangeValid(() => this.readPreferences()));\n\n        this.toDispose.push(Disposable.create(() => this.reset()));\n    }\n\n    protected abstract getUri(): URI;\n    protected abstract getScope(): PreferenceScope;\n\n    protected get valid(): boolean {\n        return this.model && this.model.valid || false;\n    }\n\n    getConfigUri(): URI;\n    getConfigUri(resourceUri: string | undefined): URI | undefined;\n    getConfigUri(resourceUri?: string): URI | undefined {\n        if (!resourceUri) {\n            return this.getUri();\n        }\n        return this.valid && this.contains(resourceUri) ? this.getUri() : undefined;\n    }\n\n    contains(resourceUri: string | undefined): boolean {\n        if (!resourceUri) {\n            return true;\n        }\n        const domain = this.getDomain();\n        if (!domain) {\n            return true;\n        }\n        const resourcePath = new URI(resourceUri).path;\n        return domain.some(uri => new URI(uri).path.relativity(resourcePath) >= 0);\n    }\n\n    getPreferences(resourceUri?: string): { [key: string]: any } {\n        return this.valid && this.contains(resourceUri) ? this.preferences : {};\n    }\n\n    async setPreference(key: string, value: any, resourceUri?: string): Promise<boolean> {\n        await this.loading.promise;\n        if (!this.model) {\n            return false;\n        }\n        if (!this.contains(resourceUri)) {\n            return false;\n        }\n        const path = this.getPath(key);\n        if (!path) {\n            return false;\n        }\n        try {\n            const content = this.model.getText().trim();\n            if (!content && value === undefined) {\n                return true;\n            }\n            const textModel = this.model.textEditorModel;\n            const editOperations: monaco.editor.IIdentifiedSingleEditOperation[] = [];\n            if (path.length || value !== undefined) {\n                const { insertSpaces, tabSize, defaultEOL } = textModel.getOptions();\n                for (const edit of jsoncparser.modify(content, path, value, {\n                    formattingOptions: {\n                        insertSpaces,\n                        tabSize,\n                        eol: defaultEOL === monaco.editor.DefaultEndOfLine.LF ? '\\n' : '\\r\\n'\n                    }\n                })) {\n                    const start = textModel.getPositionAt(edit.offset);\n                    const end = textModel.getPositionAt(edit.offset + edit.length);\n                    editOperations.push({\n                        range: monaco.Range.fromPositions(start, end),\n                        text: edit.content || null,\n                        forceMoveMarkers: false\n                    });\n                }\n            } else {\n                editOperations.push({\n                    range: textModel.getFullModelRange(),\n                    text: null,\n                    forceMoveMarkers: false\n                });\n            }\n            await this.workspace.applyBackgroundEdit(this.model, editOperations);\n            return true;\n        } catch (e) {\n            const message = `Failed to update the value of '${key}' in '${this.getUri()}'.`;\n            this.messageService.error(`${message} Please check if it is corrupted.`);\n            console.error(`${message}`, e);\n            return false;\n        }\n    }\n\n    protected getPath(preferenceName: string): string[] | undefined {\n        return [preferenceName];\n    }\n\n    /**\n     * It HAS to be sync to ensure that `setPreference` returns only when values are updated\n     * or any other operation modifying the monaco model content.\n     */\n    protected readPreferences(): void {\n        const model = this.model;\n        if (!model || model.dirty) {\n            return;\n        }\n        try {\n            let preferences;\n            if (model.valid) {\n                const content = model.getText();\n                preferences = this.getParsedContent(content);\n            } else {\n                preferences = {};\n            }\n            this.handlePreferenceChanges(preferences);\n        } catch (e) {\n            console.error(`Failed to load preferences from '${this.getUri()}'.`, e);\n        }\n    }\n\n    protected getParsedContent(content: string): { [key: string]: any } {\n        const jsonData = this.parse(content);\n\n        const preferences: { [key: string]: any } = {};\n        if (typeof jsonData !== 'object') {\n            return preferences;\n        }\n        // eslint-disable-next-line guard-for-in\n        for (const preferenceName in jsonData) {\n            const preferenceValue = jsonData[preferenceName];\n            if (this.schemaProvider.testOverrideValue(preferenceName, preferenceValue)) {\n                // eslint-disable-next-line guard-for-in\n                for (const overriddenPreferenceName in preferenceValue) {\n                    const overriddenValue = preferenceValue[overriddenPreferenceName];\n                    preferences[`${preferenceName}.${overriddenPreferenceName}`] = overriddenValue;\n                }\n            } else {\n                preferences[preferenceName] = preferenceValue;\n            }\n        }\n        return preferences;\n    }\n\n    protected parse(content: string): any {\n        content = content.trim();\n        if (!content) {\n            return undefined;\n        }\n        const strippedContent = jsoncparser.stripComments(content);\n        return jsoncparser.parse(strippedContent);\n    }\n\n    protected handlePreferenceChanges(newPrefs: { [key: string]: any }): void {\n        const oldPrefs = Object.assign({}, this.preferences);\n        this.preferences = newPrefs;\n        const prefNames = new Set([...Object.keys(oldPrefs), ...Object.keys(newPrefs)]);\n        const prefChanges: PreferenceProviderDataChange[] = [];\n        const uri = this.getUri();\n        for (const prefName of prefNames.values()) {\n            const oldValue = oldPrefs[prefName];\n            const newValue = newPrefs[prefName];\n            const schemaProperties = this.schemaProvider.getCombinedSchema().properties[prefName];\n            if (schemaProperties) {\n                const scope = schemaProperties.scope;\n                // do not emit the change event if the change is made out of the defined preference scope\n                if (!this.schemaProvider.isValidInScope(prefName, this.getScope())) {\n                    console.warn(`Preference ${prefName} in ${uri} can only be defined in scopes: ${PreferenceScope.getScopeNames(scope).join(', ')}.`);\n                    continue;\n                }\n            }\n            if (newValue === undefined && oldValue !== newValue\n                || oldValue === undefined && newValue !== oldValue // JSONExt.deepEqual() does not support handling `undefined`\n                || !JSONExt.deepEqual(oldValue, newValue)) {\n                prefChanges.push({\n                    preferenceName: prefName, newValue, oldValue, scope: this.getScope(), domain: this.getDomain()\n                });\n            }\n        }\n\n        if (prefChanges.length > 0) { // do not emit the change event if the pref value is not changed\n            this.emitPreferencesChangedEvent(prefChanges);\n        }\n    }\n\n    protected reset(): void {\n        const preferences = this.preferences;\n        this.preferences = {};\n        const changes: PreferenceProviderDataChange[] = [];\n        for (const prefName of Object.keys(preferences)) {\n            const value = preferences[prefName];\n            if (value !== undefined) {\n                changes.push({\n                    preferenceName: prefName, newValue: undefined, oldValue: value, scope: this.getScope(), domain: this.getDomain()\n                });\n            }\n        }\n        if (changes.length > 0) {\n            this.emitPreferencesChangedEvent(changes);\n        }\n    }\n\n}\n\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\nimport { FileStat } from '@theia/filesystem/lib/common';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\n\nexport const FolderPreferenceProviderFactory = Symbol('FolderPreferenceProviderFactory');\nexport interface FolderPreferenceProviderFactory {\n    (options: FolderPreferenceProviderOptions): FolderPreferenceProvider;\n}\n\nexport const FolderPreferenceProviderOptions = Symbol('FolderPreferenceProviderOptions');\nexport interface FolderPreferenceProviderOptions {\n    readonly folder: FileStat;\n    readonly configUri: URI;\n}\n\n@injectable()\nexport class FolderPreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\n    @inject(FolderPreferenceProviderOptions) protected readonly options: FolderPreferenceProviderOptions;\n\n    private _folderUri: URI;\n\n    get folderUri(): URI {\n        if (!this._folderUri) {\n            this._folderUri = new URI(this.options.folder.uri);\n        }\n        return this._folderUri;\n    }\n\n    protected getUri(): URI {\n        return this.options.configUri;\n    }\n\n    protected getScope(): PreferenceScope {\n        if (!this.workspaceService.isMultiRootWorkspaceOpened) {\n            // when FolderPreferenceProvider is used as a delegate of WorkspacePreferenceProvider in a one-folder workspace\n            return PreferenceScope.Workspace;\n        }\n        return PreferenceScope.Folder;\n    }\n\n    getDomain(): string[] {\n        return [this.folderUri.toString()];\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceProvider, PreferenceResolveResult } from '@theia/core/lib/browser/preferences/preference-provider';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { FolderPreferenceProvider, FolderPreferenceProviderFactory, FolderPreferenceProviderOptions } from './folder-preference-provider';\n\n@injectable()\nexport class FoldersPreferencesProvider extends PreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(FolderPreferenceProviderFactory)\n    protected readonly folderPreferenceProviderFactory: FolderPreferenceProviderFactory;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    protected readonly providers = new Map<string, FolderPreferenceProvider>();\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        await this.workspaceService.roots;\n\n        this.updateProviders();\n        this.workspaceService.onWorkspaceChanged(() => this.updateProviders());\n\n        const readyPromises: Promise<void>[] = [];\n        for (const provider of this.providers.values()) {\n            readyPromises.push(provider.ready.catch(e => console.error(e)));\n        }\n        Promise.all(readyPromises).then(() => this._ready.resolve());\n    }\n\n    protected updateProviders(): void {\n        const roots = this.workspaceService.tryGetRoots();\n        const toDelete = new Set(this.providers.keys());\n        for (const folder of roots) {\n            for (const configPath of this.configurations.getPaths()) {\n                for (const configName of [...this.configurations.getSectionNames(), this.configurations.getConfigName()]) {\n                    const configUri = this.configurations.createUri(new URI(folder.uri), configPath, configName);\n                    const key = configUri.toString();\n                    toDelete.delete(key);\n                    if (!this.providers.has(key)) {\n                        const provider = this.createProvider({ folder, configUri });\n                        this.providers.set(key, provider);\n                    }\n                }\n            }\n        }\n        for (const key of toDelete) {\n            const provider = this.providers.get(key);\n            if (provider) {\n                this.providers.delete(key);\n                provider.dispose();\n            }\n        }\n    }\n\n    getConfigUri(resourceUri?: string): URI | undefined {\n        for (const provider of this.getFolderProviders(resourceUri)) {\n            const configUri = provider.getConfigUri(resourceUri);\n            if (this.configurations.isConfigUri(configUri)) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    getContainingConfigUri(resourceUri?: string): URI | undefined {\n        for (const provider of this.getFolderProviders(resourceUri)) {\n            const configUri = provider.getConfigUri();\n            if (this.configurations.isConfigUri(configUri) && provider.contains(resourceUri)) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    getDomain(): string[] {\n        return this.workspaceService.tryGetRoots().map(root => root.uri);\n    }\n\n    resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n        const result: PreferenceResolveResult<T> = {};\n        const groups = this.groupProvidersByConfigName(resourceUri);\n        for (const group of groups.values()) {\n            for (const provider of group) {\n                const { value, configUri } = provider.resolve<T>(preferenceName, resourceUri);\n                if (configUri && value !== undefined) {\n                    result.configUri = configUri;\n                    result.value = PreferenceProvider.merge(result.value as any, value as any) as any;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    getPreferences(resourceUri?: string): { [p: string]: any } {\n        let result = {};\n        const groups = this.groupProvidersByConfigName(resourceUri);\n        for (const group of groups.values()) {\n            for (const provider of group) {\n                if (provider.getConfigUri(resourceUri)) {\n                    const preferences = provider.getPreferences();\n                    result = PreferenceProvider.merge(result, preferences) as any;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri?: string): Promise<boolean> {\n        const sectionName = preferenceName.split('.', 1)[0];\n        const configName = this.configurations.isSectionName(sectionName) ? sectionName : this.configurations.getConfigName();\n\n        const providers = this.getFolderProviders(resourceUri);\n        let configPath: string | undefined;\n\n        const iterator: (() => FolderPreferenceProvider | undefined)[] = [];\n        for (const provider of providers) {\n            if (configPath === undefined) {\n                const configUri = provider.getConfigUri(resourceUri);\n                if (configUri) {\n                    configPath = this.configurations.getPath(configUri);\n                }\n            }\n            if (this.configurations.getName(provider.getConfigUri()) === configName) {\n                iterator.push(() => {\n                    if (provider.getConfigUri(resourceUri)) {\n                        return provider;\n                    }\n                    iterator.push(() => {\n                        if (this.configurations.getPath(provider.getConfigUri()) === configPath) {\n                            return provider;\n                        }\n                        iterator.push(() => provider);\n                    });\n                });\n            }\n        }\n\n        let next = iterator.shift();\n        while (next) {\n            const provider = next();\n            if (provider) {\n                if (await provider.setPreference(preferenceName, value, resourceUri)) {\n                    return true;\n                }\n            }\n            next = iterator.shift();\n        }\n        return false;\n    }\n\n    protected groupProvidersByConfigName(resourceUri?: string): Map<string, FolderPreferenceProvider[]> {\n        const groups = new Map<string, FolderPreferenceProvider[]>();\n        const providers = this.getFolderProviders(resourceUri);\n        for (const configName of [this.configurations.getConfigName(), ...this.configurations.getSectionNames()]) {\n            const group = [];\n            for (const provider of providers) {\n                if (this.configurations.getName(provider.getConfigUri()) === configName) {\n                    group.push(provider);\n                }\n            }\n            groups.set(configName, group);\n        }\n        return groups;\n    }\n\n    protected getFolderProviders(resourceUri?: string): FolderPreferenceProvider[] {\n        if (!resourceUri) {\n            return [];\n        }\n        const resourcePath = new URI(resourceUri).path;\n        let folder: Readonly<{ relativity: number, uri?: string }> = { relativity: Number.MAX_SAFE_INTEGER };\n        const providers = new Map<string, FolderPreferenceProvider[]>();\n        for (const provider of this.providers.values()) {\n            const uri = provider.folderUri.toString();\n            const folderProviders = (providers.get(uri) || []);\n            folderProviders.push(provider);\n            providers.set(uri, folderProviders);\n\n            const relativity = provider.folderUri.path.relativity(resourcePath);\n            if (relativity >= 0 && folder.relativity > relativity) {\n                folder = { relativity, uri };\n            }\n        }\n        return folder.uri && providers.get(folder.uri) || [];\n    }\n\n    protected createProvider(options: FolderPreferenceProviderOptions): FolderPreferenceProvider {\n        const provider = this.folderPreferenceProviderFactory(options);\n        this.toDispose.push(provider);\n        this.toDispose.push(provider.onDidPreferencesChanged(change => this.onDidPreferencesChangedEmitter.fire(change)));\n        return provider;\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\nimport { UserStorageUri } from '@theia/userstorage/lib/browser';\nimport { PreferenceScope } from '@theia/core/lib/browser';\n\nexport const USER_PREFERENCE_URI = new URI().withScheme(UserStorageUri.SCHEME).withPath('settings.json');\n@injectable()\nexport class UserPreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    protected getUri(): URI {\n        return USER_PREFERENCE_URI;\n    }\n\n    protected getScope(): PreferenceScope {\n        return PreferenceScope.User;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService, WorkspaceData } from '@theia/workspace/lib/browser/workspace-service';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\n\n@injectable()\nexport class WorkspaceFilePreferenceProviderOptions {\n    workspaceUri: URI;\n}\n\nexport const WorkspaceFilePreferenceProviderFactory = Symbol('WorkspaceFilePreferenceProviderFactory');\nexport type WorkspaceFilePreferenceProviderFactory = (options: WorkspaceFilePreferenceProviderOptions) => WorkspaceFilePreferenceProvider;\n\n@injectable()\nexport class WorkspaceFilePreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(WorkspaceFilePreferenceProviderOptions)\n    protected readonly options: WorkspaceFilePreferenceProviderOptions;\n\n    protected getUri(): URI {\n        return this.options.workspaceUri;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected parse(content: string): any {\n        const data = super.parse(content);\n        if (WorkspaceData.is(data)) {\n            return data.settings || {};\n        }\n        return {};\n    }\n\n    protected getPath(preferenceName: string): string[] {\n        return ['settings', preferenceName];\n    }\n\n    protected getScope(): PreferenceScope {\n        return PreferenceScope.Workspace;\n    }\n\n    getDomain(): string[] {\n        // workspace file is treated as part of the workspace\n        return this.workspaceService.tryGetRoots().map(r => r.uri).concat([this.options.workspaceUri.toString()]);\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct, named } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { DisposableCollection } from '@theia/core/lib/common/disposable';\nimport { PreferenceScope, PreferenceProvider } from '@theia/core/lib/browser/preferences';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { WorkspaceFilePreferenceProviderFactory, WorkspaceFilePreferenceProvider } from './workspace-file-preference-provider';\n\n@injectable()\nexport class WorkspacePreferenceProvider extends PreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    @inject(WorkspaceFilePreferenceProviderFactory)\n    protected readonly workspaceFileProviderFactory: WorkspaceFilePreferenceProviderFactory;\n\n    @inject(PreferenceProvider) @named(PreferenceScope.Folder)\n    protected readonly folderPreferenceProvider: PreferenceProvider;\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        this._ready.resolve();\n        this.ensureDelegateUpToDate();\n        this.workspaceService.onWorkspaceLocationChanged(() => this.ensureDelegateUpToDate());\n    }\n\n    getConfigUri(resourceUri: string | undefined = this.ensureResourceUri()): URI | undefined {\n        const delegate = this.delegate;\n        return delegate && delegate.getConfigUri(resourceUri);\n    }\n\n    protected _delegate: PreferenceProvider | undefined;\n    protected get delegate(): PreferenceProvider | undefined {\n        if (!this._delegate) {\n            this.ensureDelegateUpToDate();\n        }\n        return this._delegate;\n    }\n    protected readonly toDisposeOnEnsureDelegateUpToDate = new DisposableCollection();\n    protected ensureDelegateUpToDate(): void {\n        const delegate = this.createDelegate();\n        if (this._delegate !== delegate) {\n            this.toDisposeOnEnsureDelegateUpToDate.dispose();\n            this.toDispose.push(this.toDisposeOnEnsureDelegateUpToDate);\n\n            this._delegate = delegate;\n\n            if (delegate instanceof WorkspaceFilePreferenceProvider) {\n                this.toDisposeOnEnsureDelegateUpToDate.pushAll([\n                    delegate,\n                    delegate.onDidPreferencesChanged(changes => this.onDidPreferencesChangedEmitter.fire(changes))\n                ]);\n            }\n        }\n    }\n    protected createDelegate(): PreferenceProvider | undefined {\n        const workspace = this.workspaceService.workspace;\n        if (!workspace) {\n            return undefined;\n        }\n        if (!this.workspaceService.isMultiRootWorkspaceOpened) {\n            return this.folderPreferenceProvider;\n        }\n        return this.workspaceFileProviderFactory({\n            workspaceUri: new URI(workspace.uri)\n        });\n    }\n\n    get<T>(preferenceName: string, resourceUri: string | undefined = this.ensureResourceUri()): T | undefined {\n        const delegate = this.delegate;\n        return delegate ? delegate.get<T>(preferenceName, resourceUri) : undefined;\n    }\n\n    resolve<T>(preferenceName: string, resourceUri: string | undefined = this.ensureResourceUri()): { value?: T, configUri?: URI } {\n        const delegate = this.delegate;\n        return delegate ? delegate.resolve<T>(preferenceName, resourceUri) : {};\n    }\n\n    getPreferences(resourceUri: string | undefined = this.ensureResourceUri()): { [p: string]: any } {\n        const delegate = this.delegate;\n        return delegate ? delegate.getPreferences(resourceUri) : {};\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri: string | undefined = this.ensureResourceUri()): Promise<boolean> {\n        const delegate = this.delegate;\n        if (delegate) {\n            return delegate.setPreference(preferenceName, value, resourceUri);\n        }\n        return false;\n    }\n\n    protected ensureResourceUri(): string | undefined {\n        if (this.workspaceService.workspace && !this.workspaceService.isMultiRootWorkspaceOpened) {\n            return this.workspaceService.workspace.uri;\n        }\n        return undefined;\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './user-storage-service';\nexport * from './user-storage-resource';\nexport * from './user-storage-uri';\nexport * from './user-storage-service-filesystem';\nexport * from './user-storage-frontend-module';\n"],"sourceRoot":""}